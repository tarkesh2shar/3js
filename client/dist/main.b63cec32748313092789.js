!function(e){function t(t){for(var r,a,u=t[0],d=t[1],c=t[2],s=0,f=[];s<u.length;s++)a=u[s],Object.prototype.hasOwnProperty.call(o,a)&&o[a]&&f.push(o[a][0]),o[a]=0;for(r in d)Object.prototype.hasOwnProperty.call(d,r)&&(e[r]=d[r]);for(l&&l(t);f.length;)f.shift()();return i.push.apply(i,c||[]),n()}function n(){for(var e,t=0;t<i.length;t++){for(var n=i[t],r=!0,u=1;u<n.length;u++){var d=n[u];0!==o[d]&&(r=!1)}r&&(i.splice(t--,1),e=a(a.s=n[0]))}return e}var r={},o={0:0},i=[];function a(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=e,a.c=r,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)a.d(n,r,function(t){return e[t]}.bind(null,r));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="";var u=window.webpackJsonp=window.webpackJsonp||[],d=u.push.bind(u);u.push=t,u=u.slice();for(var c=0;c<u.length;c++)t(u[c]);var l=d;i.push([157,3,1,12,10,14,2,24,13,11,21,4,5,6,7,8,9,15,16,18,19,17,20,22,23]),n()}({108:function(e,t,n){e.exports=n.p+"b884a87b665154e14ba7a06f393fcb46.jpg"},109:function(e,t,n){e.exports=n.p+"86395b284f131002c09c9a6d32bfde1b.jpg"},110:function(e,t,n){e.exports=n.p+"4bd3f98c2d44c45145ddd31f463eab8b.jpg"},111:function(e,t,n){e.exports=n.p+"7eddcb9a916b1684ba1694dfe5fef212.jpg"},157:function(e,t,n){n(158),e.exports=n(360)},360:function(e,t,n){"use strict";var r=g(n(1)),o=g(n(362)),i=(g(n(366)),g(n(367))),a=n(369),u=g(n(374)),d=g(n(375)),c=g(n(377)),l=g(n(378)),s=g(n(379)),f=g(n(61)),m=g(n(381)),p=g(n(384)),h=g(n(385)),w=g(n(386)),v=g(n(388)),y=g(n(389));function g(e){return e&&e.__esModule?e:{default:e}}n(396),o.default.render(r.default.createElement(a.BrowserRouter,null,r.default.createElement(a.Switch,null,r.default.createElement(a.Route,{path:"/css",component:y.default}),r.default.createElement(a.Route,{path:"/combined",component:v.default}),r.default.createElement(a.Route,{path:"/earth",component:w.default}),r.default.createElement(a.Route,{path:"/tdt",component:h.default}),r.default.createElement(a.Route,{path:"/youtube",component:p.default}),r.default.createElement(a.Route,{path:"/periodic",component:m.default}),r.default.createElement(a.Route,{path:"/point",component:function(){return r.default.createElement(s.default,{image:f.default})}}),r.default.createElement(a.Route,{path:"/tech",component:l.default}),r.default.createElement(a.Route,{path:"/med",component:c.default}),r.default.createElement(a.Route,{path:"/tbl",component:d.default}),r.default.createElement(a.Route,{path:"/pure",component:u.default}),r.default.createElement(a.Route,{path:"/impure",component:i.default}),r.default.createElement(a.Route,{path:"/",component:y.default}))),document.querySelector("#root"))},366:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};t.default=function(){var e,t,n,m,p,h=!1,w=0,v=0,y=0,g=0,b=[u.default,d.default,c.default,l.default,s.default],M=(0,o.useState)(a.default),E=r(M,2),S=E[0];E[1];return(0,o.useEffect)(function(){m=document.querySelector(".container"),(e=new f.PerspectiveCamera(75,window.innerWidth/window.innerHeight,1,1100)).target=new f.Vector3(0,0,0),t=new f.Scene;var r=new f.SphereBufferGeometry(500,60,40);r.scale(-1,1,1);var o=(new f.TextureLoader).load(S),i=new f.MeshBasicMaterial({map:o});p=new f.Mesh(r,i),t.add(p),(n=new f.WebGLRenderer).setPixelRatio(window.devicePixelRatio),n.setSize(window.innerWidth,window.innerHeight),m.appendChild(n.domElement),function r(){requestAnimationFrame(r),!1===h&&(w+=.1),v=Math.max(-85,Math.min(85,v)),y=f.Math.degToRad(90-v),g=f.Math.degToRad(w),e.target.x=500*Math.sin(y)*Math.cos(g),e.target.y=500*Math.cos(y),e.target.z=500*Math.sin(y)*Math.sin(g),e.lookAt(e.target),n.render(t,e)}()},[S]),i.default.createElement("div",{className:"container",onLoad:function(e){}},i.default.createElement("div",{className:"sampleGallery"},function(){return b.map(function(e){return i.default.createElement("div",{className:"minibox",key:e,onClick:function(t){console.log("clickedItem",e)}},i.default.createElement("img",{src:e}))})}()))};var o=n(1),i=m(o),a=m(n(61)),u=m(n(108)),d=m(n(109)),c=m(n(110)),l=m(n(111)),s=m(n(78)),f=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(16));function m(e){return e&&e.__esModule?e:{default:e}}},367:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};t.default=function(){var e=[d.default,c.default,l.default,s.default,f.default],t=(0,o.useState)(u.default),n=r(t,2),m=n[0],p=n[1];return i.default.createElement("div",null,i.default.createElement(a.default,{image:m}),i.default.createElement("div",{className:"sampleGallery"},e.map(function(e){return i.default.createElement("div",{className:"minibox",key:e,onClick:function(t){p(e),console.log("clickedItem",e)}},i.default.createElement("img",{src:e}))})))};var o=n(1),i=m(o),a=m(n(368)),u=m(n(61)),d=m(n(108)),c=m(n(109)),l=m(n(110)),s=m(n(111)),f=m(n(78));function m(e){return e&&e.__esModule?e:{default:e}}},368:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t,n,r,u,d,c=e.image,l=!1,s=0,f=0,m=0,p=0;return(0,o.useEffect)(function(){u=document.querySelector(".container"),(t=new a.PerspectiveCamera(75,window.innerWidth/window.innerHeight,1,1100)).target=new a.Vector3(0,0,0),n=new a.Scene;var e=new a.SphereBufferGeometry(500,60,40);e.scale(-1,1,1);var o=(new a.TextureLoader).load(c),i=new a.MeshBasicMaterial({map:o});return d=new a.Mesh(e,i),n.add(d),(r=new a.WebGLRenderer).setPixelRatio(window.devicePixelRatio),r.setSize(window.innerWidth,window.innerHeight),u.appendChild(r.domElement),function e(){requestAnimationFrame(e),!1===l&&(s+=.1),f=Math.max(-85,Math.min(85,f)),m=a.Math.degToRad(90-f),p=a.Math.degToRad(s),t.target.x=500*Math.sin(m)*Math.cos(p),t.target.y=500*Math.cos(m),t.target.z=500*Math.sin(m)*Math.sin(p),t.lookAt(t.target),r.render(n,t)}(),function(){(u=document.querySelector(".container")).innerHTML=""}},[c]),i.default.createElement("div",{className:"container",onLoad:function(e){}})};var r,o=n(1),i=(r=o)&&r.__esModule?r:{default:r},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(16))},374:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(1),i=u(o),a=u(n(61));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"componentDidMount",value:function(){var e=this.refs.canvas,t=e.getContext("2d"),n=this.refs.image;n.onload=function(){t.drawImage(n,0,0),t.font="40px Courier",t.fillText("tarkesh2shar",210,75)};var r=e.toDataURL();console.log("dataurl",r)}},{key:"render",value:function(){return i.default.createElement("div",null,"da",i.default.createElement("canvas",{ref:"canvas",width:640,height:425}),i.default.createElement("img",{ref:"image",src:a.default,className:"hidden"}))}}]),t}();t.default=d},375:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};t.default=function(){var e=(0,o.useState)(localStorage.getItem("img_url")),t=r(e,2),n=t[0],u=t[1];return i.default.createElement("div",{className:"tbl_hell_Container"},i.default.createElement("div",{className:"tbl_image_container"},m.map(function(e){return i.default.createElement("div",{className:"minibox",key:e,onClick:function(t){u(e),console.log("clickedItem",e)}},i.default.createElement("img",{src:e}))})),i.default.createElement(a.default,{image:n}))};var o=n(1),i=f(o),a=f(n(376)),u=(f(n(61)),f(n(108))),d=f(n(109)),c=f(n(110)),l=f(n(111)),s=f(n(78));function f(e){return e&&e.__esModule?e:{default:e}}var m=[u.default,d.default,c.default,l.default,s.default]},376:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t,n,r,u,d,c=e.image,l=(0,o.useRef)(null),s=0,f=0,m=0,p=0,h=0,w=0,v=0,y=0,g=!1,b=function(){t.aspect=window.innerWidth/window.innerHeight,t.updateProjectionMatrix(),r.setSize(window.innerWidth,window.innerHeight)};function M(e){g=!0;var t=e.clientX||e.touches[0].clientX,n=e.clientY||e.touches[0].clientY;s=t,f=n,p=m,w=h}function E(e){if(!0===g){var t=e.clientX||e.touches[0].clientX,n=e.clientY||e.touches[0].clientY;m=.1*(s-t)+p,h=.1*(n-f)+w}}function S(){g=!1}function x(e){var n=t.fov+.5*e.deltaY;t.fov=a.Math.clamp(n,10,75),t.updateProjectionMatrix()}function P(e){e.preventDefault();var t=new FileReader;t.addEventListener("load",function(e){d.map.image.src=e.target.result,d.map.needsUpdate=!0},!1),t.readAsDataURL(e.dataTransfer.files[0]),document.body.style.opacity=1}function _(e){e.preventDefault(),e.dataTransfer.dropEffect="copy"}function L(){document.body.style.opacity=1}function C(){document.body.style.opacity=.5}return(0,o.useEffect)(function(){window.addEventListener("resize",b,!1),l.current.addEventListener("mousedown",M,!1),l.current.addEventListener("mousemove",E,!1),l.current.addEventListener("mouseup",S,!1),l.current.addEventListener("touchstart",M,!1),l.current.addEventListener("touchmove",E,!1),l.current.addEventListener("touchend",S,!1),document.addEventListener("wheel",x,!1),l.current.addEventListener("dragenter",C,!1),l.current.addEventListener("dragleave",L,!1),l.current.addEventListener("dragover",_,!1),l.current.addEventListener("drop",P,!1),(t=new a.PerspectiveCamera(75,window.innerWidth/window.innerHeight,1,1100)).target=new a.Vector3(0,0,0),n=new a.Scene;var e=new a.SphereBufferGeometry(500,60,40);e.scale(-1,1,1);var o=(new a.TextureLoader).load(c);return d=new a.MeshBasicMaterial({map:o}),u=new a.Mesh(e,d),n.add(u),(r=new a.WebGLRenderer).setPixelRatio(window.devicePixelRatio),r.setSize(window.innerWidth,window.innerHeight),l.current.appendChild(r.domElement),function e(){requestAnimationFrame(e),!1===g&&(m+=.1),h=Math.max(-85,Math.min(85,h)),v=a.Math.degToRad(90-h),y=a.Math.degToRad(m),t.target.x=500*Math.sin(v)*Math.cos(y),t.target.y=500*Math.cos(v),t.target.z=500*Math.sin(v)*Math.sin(y),t.lookAt(t.target),r.render(n,t)}(),function(){window.removeEventListener("resize",b,!1),l.current.removeEventListener("mousedown",M,!1),l.current.removeEventListener("mousemove",E,!1),l.current.removeEventListener("mouseup",S,!1),l.current.removeEventListener("touchstart",M,!1),l.current.removeEventListener("touchmove",E,!1),l.current.removeEventListener("touchend",S,!1),document.removeEventListener("wheel",x,!1),l.current.removeEventListener("dragenter",C,!1),l.current.removeEventListener("dragleave",L,!1),l.current.removeEventListener("dragover",_,!1),l.current.removeEventListener("drop",P,!1),l.current.innerHTML=""}},[c]),i.default.createElement("div",{className:"container",ref:l})};var r,o=n(1),i=(r=o)&&r.__esModule?r:{default:r},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(16))},377:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(1),a=(r=i)&&r.__esModule?r:{default:r},u=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(16));var d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i.Component),o(t,[{key:"componentDidMount",value:function(){var e=new u.Scene,t=document.querySelector(".hell");console.log(t);var n=new u.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3),r=new u.WebGLRenderer;r.setSize(window.innerWidth,window.innerHeight),this.mount.appendChild(r.domElement);var o=new u.BoxGeometry(1,1,1),i=new u.MeshBasicMaterial({color:65280}),a=new u.Mesh(o,i);e.add(a),n.position.z=5;!function t(){requestAnimationFrame(t),a.rotation.x+=.01,a.rotation.y+=.01,r.render(e,n)}()}},{key:"render",value:function(){var e=this;return a.default.createElement("div",{className:"",ref:function(t){return e.mount=t}},"ds")}}]),t}();t.default=d},378:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,o.useEffect)(function(){return function(){}},[e]),i.default.createElement("div",null,"Dont worry!")};var r,o=n(1),i=(r=o)&&r.__esModule?r:{default:r}},379:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t,n,d,c,l,s=e.image,f=(0,r.useRef)(null),m=0,p=0,h=0,w=0,v=0,y=0,g=0,b=0,M=!1,E=function(){t.aspect=window.innerWidth/window.innerHeight,t.updateProjectionMatrix(),d.setSize(window.innerWidth,window.innerHeight)};function S(e){M=!0;var t=e.clientX||e.touches[0].clientX,n=e.clientY||e.touches[0].clientY;m=t,p=n,w=h,y=v;i.Object3D()}function x(e){if(!0===M){var t=e.clientX||e.touches[0].clientX,n=e.clientY||e.touches[0].clientY;h=.1*(m-t)+w,v=.1*(n-p)+y}}function P(){M=!1}function _(e){var n=t.fov+.5*e.deltaY;t.fov=i.Math.clamp(n,10,75),t.updateProjectionMatrix()}function L(e){e.preventDefault();var t=new FileReader;t.addEventListener("load",function(e){l.map.image.src=e.target.result,l.map.needsUpdate=!0},!1),t.readAsDataURL(e.dataTransfer.files[0]),document.body.style.opacity=1}function C(e){e.preventDefault(),e.dataTransfer.dropEffect="copy"}function j(){document.body.style.opacity=1}function O(){document.body.style.opacity=.5}return(0,r.useEffect)(function(){window.addEventListener("resize",E,!1),f.current.addEventListener("mousedown",S,!1),f.current.addEventListener("mousemove",x,!1),f.current.addEventListener("mouseup",P,!1),f.current.addEventListener("touchstart",S,!1),f.current.addEventListener("touchmove",x,!1),f.current.addEventListener("touchend",P,!1),document.addEventListener("wheel",_,!1),f.current.addEventListener("dragenter",O,!1),f.current.addEventListener("dragleave",j,!1),f.current.addEventListener("dragover",C,!1),f.current.addEventListener("drop",L,!1),(t=new i.PerspectiveCamera(75,window.innerWidth/window.innerHeight,1,1100)).target=new i.Vector3(0,0,0),n=new i.Scene;var e=new i.SphereBufferGeometry(500,60,40);e.scale(-1,1,1);var r=(new i.TextureLoader).load(s);l=new i.MeshBasicMaterial({map:r}),c=new i.Mesh(e,l),n.add(c),(d=new i.WebGLRenderer).setPixelRatio(window.devicePixelRatio),d.setSize(window.innerWidth,window.innerHeight),f.current.appendChild(d.domElement);var o=document.createElement("img");o.src=a.default,o.height="300px",o.width="300px";var m=new u.CSS3DObject(o);m.position.copy(t.target),n.add(m),function e(){requestAnimationFrame(e),!1===M&&(h+=.1),v=Math.max(-85,Math.min(85,v)),g=i.Math.degToRad(90-v),b=i.Math.degToRad(h),t.target.x=500*Math.sin(g)*Math.cos(b),t.target.y=500*Math.cos(g),t.target.z=500*Math.sin(g)*Math.sin(b),t.lookAt(t.target),d.render(n,t)}()},[s]),o.default.createElement("div",{className:"container",ref:f})};var r=n(1),o=d(r),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(16)),a=d(n(380)),u=n(50);function d(e){return e&&e.__esModule?e:{default:e}}},380:function(e,t,n){e.exports=n.p+"bf87df8a7d3a67b09005bad5bb060a2e.jpg"},381:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){console.log("1",a.default),console.log("2",u.default),console.log("3",d.CSS3DRenderer),console.log("4",d.CSS3DObject);var e,t,n,c,l=["H","Hydrogen","1.00794",1,1,"He","Helium","4.002602",18,1,"Li","Lithium","6.941",1,2,"Be","Beryllium","9.012182",2,2,"B","Boron","10.811",13,2,"C","Carbon","12.0107",14,2,"N","Nitrogen","14.0067",15,2,"O","Oxygen","15.9994",16,2,"F","Fluorine","18.9984032",17,2,"Ne","Neon","20.1797",18,2,"Na","Sodium","22.98976...",1,3,"Mg","Magnesium","24.305",2,3,"Al","Aluminium","26.9815386",13,3,"Si","Silicon","28.0855",14,3,"P","Phosphorus","30.973762",15,3,"S","Sulfur","32.065",16,3,"Cl","Chlorine","35.453",17,3,"Ar","Argon","39.948",18,3,"K","Potassium","39.948",1,4,"Ca","Calcium","40.078",2,4,"Sc","Scandium","44.955912",3,4,"Ti","Titanium","47.867",4,4,"V","Vanadium","50.9415",5,4,"Cr","Chromium","51.9961",6,4,"Mn","Manganese","54.938045",7,4,"Fe","Iron","55.845",8,4,"Co","Cobalt","58.933195",9,4,"Ni","Nickel","58.6934",10,4,"Cu","Copper","63.546",11,4,"Zn","Zinc","65.38",12,4,"Ga","Gallium","69.723",13,4,"Ge","Germanium","72.63",14,4,"As","Arsenic","74.9216",15,4,"Se","Selenium","78.96",16,4,"Br","Bromine","79.904",17,4,"Kr","Krypton","83.798",18,4,"Rb","Rubidium","85.4678",1,5,"Sr","Strontium","87.62",2,5,"Y","Yttrium","88.90585",3,5,"Zr","Zirconium","91.224",4,5,"Nb","Niobium","92.90628",5,5,"Mo","Molybdenum","95.96",6,5,"Tc","Technetium","(98)",7,5,"Ru","Ruthenium","101.07",8,5,"Rh","Rhodium","102.9055",9,5,"Pd","Palladium","106.42",10,5,"Ag","Silver","107.8682",11,5,"Cd","Cadmium","112.411",12,5,"In","Indium","114.818",13,5,"Sn","Tin","118.71",14,5,"Sb","Antimony","121.76",15,5,"Te","Tellurium","127.6",16,5,"I","Iodine","126.90447",17,5,"Xe","Xenon","131.293",18,5,"Cs","Caesium","132.9054",1,6,"Ba","Barium","132.9054",2,6,"La","Lanthanum","138.90547",4,9,"Ce","Cerium","140.116",5,9,"Pr","Praseodymium","140.90765",6,9,"Nd","Neodymium","144.242",7,9,"Pm","Promethium","(145)",8,9,"Sm","Samarium","150.36",9,9,"Eu","Europium","151.964",10,9,"Gd","Gadolinium","157.25",11,9,"Tb","Terbium","158.92535",12,9,"Dy","Dysprosium","162.5",13,9,"Ho","Holmium","164.93032",14,9,"Er","Erbium","167.259",15,9,"Tm","Thulium","168.93421",16,9,"Yb","Ytterbium","173.054",17,9,"Lu","Lutetium","174.9668",18,9,"Hf","Hafnium","178.49",4,6,"Ta","Tantalum","180.94788",5,6,"W","Tungsten","183.84",6,6,"Re","Rhenium","186.207",7,6,"Os","Osmium","190.23",8,6,"Ir","Iridium","192.217",9,6,"Pt","Platinum","195.084",10,6,"Au","Gold","196.966569",11,6,"Hg","Mercury","200.59",12,6,"Tl","Thallium","204.3833",13,6,"Pb","Lead","207.2",14,6,"Bi","Bismuth","208.9804",15,6,"Po","Polonium","(209)",16,6,"At","Astatine","(210)",17,6,"Rn","Radon","(222)",18,6,"Fr","Francium","(223)",1,7,"Ra","Radium","(226)",2,7,"Ac","Actinium","(227)",4,10,"Th","Thorium","232.03806",5,10,"Pa","Protactinium","231.0588",6,10,"U","Uranium","238.02891",7,10,"Np","Neptunium","(237)",8,10,"Pu","Plutonium","(244)",9,10,"Am","Americium","(243)",10,10,"Cm","Curium","(247)",11,10,"Bk","Berkelium","(247)",12,10,"Cf","Californium","(251)",13,10,"Es","Einstenium","(252)",14,10,"Fm","Fermium","(257)",15,10,"Md","Mendelevium","(258)",16,10,"No","Nobelium","(259)",17,10,"Lr","Lawrencium","(262)",18,10,"Rf","Rutherfordium","(267)",4,7,"Db","Dubnium","(268)",5,7,"Sg","Seaborgium","(271)",6,7,"Bh","Bohrium","(272)",7,7,"Hs","Hassium","(270)",8,7,"Mt","Meitnerium","(276)",9,7,"Ds","Darmstadium","(281)",10,7,"Rg","Roentgenium","(280)",11,7,"Cn","Copernicium","(285)",12,7,"Nh","Nihonium","(286)",13,7,"Fl","Flerovium","(289)",14,7,"Mc","Moscovium","(290)",15,7,"Lv","Livermorium","(293)",16,7,"Ts","Tennessine","(294)",17,7,"Og","Oganesson","(294)",18,7],s=[],f={table:[],sphere:[],helix:[],grid:[]};function m(e,t){a.default.removeAll();for(var n=0;n<s.length;n++){var r=s[n],o=e[n];new a.default.Tween(r.position).to({x:o.position.x,y:o.position.y,z:o.position.z},Math.random()*t+t).easing(a.default.Easing.Exponential.InOut).start(),new a.default.Tween(r.rotation).to({x:o.rotation.x,y:o.rotation.y,z:o.rotation.z},Math.random()*t+t).easing(a.default.Easing.Exponential.InOut).start()}new a.default.Tween(this).to({},2*t).onUpdate(w).start()}function p(){e.aspect=window.innerWidth/window.innerHeight,e.updateProjectionMatrix(),n.setSize(window.innerWidth,window.innerHeight),w()}function h(){requestAnimationFrame(h),a.default.update(),c.update()}function w(){n.render(t,e)}return(0,r.useEffect)(function(){!function(){(e=new i.PerspectiveCamera(40,window.innerWidth/window.innerHeight,1,1e4)).position.z=3e3,t=new i.Scene;for(var r=0;r<l.length;r+=5){var o=document.createElement("div");o.className="element",o.style.backgroundColor="rgba(0,127,127,"+(.5*Math.random()+.25)+")";var a=document.createElement("div");a.className="number",a.textContent=r/5+1,o.appendChild(a);var h=document.createElement("div");h.className="symbol",h.textContent=l[r],o.appendChild(h);var v=document.createElement("div");v.className="details",v.innerHTML=l[r+1]+"<br>"+l[r+2],o.appendChild(v),(S=new d.CSS3DObject(o)).position.x=4e3*Math.random()-2e3,S.position.y=4e3*Math.random()-2e3,S.position.z=4e3*Math.random()-2e3,t.add(S),s.push(S),(S=new i.Object3D).position.x=140*l[r+3]-1330,S.position.y=-180*l[r+4]+990,f.table.push(S)}for(var y=new i.Vector3,g=(r=0,s.length);r<g;r++){var b=Math.acos(2*r/g-1),M=Math.sqrt(g*Math.PI)*b;(S=new i.Object3D).position.setFromSphericalCoords(800,b,M),y.copy(S.position).multiplyScalar(2),S.lookAt(y),f.sphere.push(S)}for(y=new i.Vector3,r=0,g=s.length;r<g;r++){M=.175*r+Math.PI;var E=-8*r+450;(S=new i.Object3D).position.setFromCylindricalCoords(900,M,E),y.x=2*S.position.x,y.y=S.position.y,y.z=2*S.position.z,S.lookAt(y),f.helix.push(S)}for(r=0;r<s.length;r++){var S;(S=new i.Object3D).position.x=r%5*400-800,S.position.y=-Math.floor(r/5)%5*400+800,S.position.z=1e3*Math.floor(r/25)-2e3,f.grid.push(S)}(n=new d.CSS3DRenderer).setSize(window.innerWidth,window.innerHeight),document.getElementById("container").appendChild(n.domElement),(c=new u.default(e,n.domElement)).minDistance=500,c.maxDistance=6e3,c.addEventListener("change",w),document.getElementById("table").addEventListener("click",function(){m(f.table,2e3)},!1),document.getElementById("sphere").addEventListener("click",function(){m(f.sphere,2e3)},!1),document.getElementById("helix").addEventListener("click",function(){m(f.helix,2e3)},!1),document.getElementById("grid").addEventListener("click",function(){m(f.grid,2e3)},!1),m(f.table,2e3),window.addEventListener("resize",p,!1)}(),h()},[]),o.default.createElement(o.default.Fragment,null,o.default.createElement("div",{id:"container"}),o.default.createElement("div",{id:"menu"},o.default.createElement("button",{id:"table"},"TABLE"),o.default.createElement("button",{id:"sphere"},"SPHERE"),o.default.createElement("button",{id:"helix"},"HELIX"),o.default.createElement("button",{id:"grid"},"GRID")))};var r=n(1),o=c(r),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(16)),a=c(n(382)),u=c(n(62)),d=n(50);function c(e){return e&&e.__esModule?e:{default:e}}},384:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e,t,n,d;var c=function(e,t,n,r,o){var i=document.createElement("div");i.style.width="480px",i.style.height="360px",i.style.backgroundColor="#000";var a=document.createElement("iframe");a.style.width="480px",a.style.height="360px",a.style.border="0px",a.src=["https://www.youtube.com/embed/",e,"?rel=0"].join(""),i.appendChild(a);var d=new u.CSS3DObject(i);return d.position.set(t,n,r),d.rotation.y=o,d};function l(){requestAnimationFrame(l),d.update(),n.render(t,e)}function s(){e.aspect=window.innerWidth/window.innerHeight,e.updateProjectionMatrix(),n.setSize(window.innerWidth,window.innerHeight)}return(0,r.useEffect)(function(){!function(){var r=document.getElementById("container");(e=new i.PerspectiveCamera(50,window.innerWidth/window.innerHeight,1,5e3)).position.set(500,350,750),t=new i.Scene,(n=new u.CSS3DRenderer).setSize(window.innerWidth,window.innerHeight),r.appendChild(n.domElement);var o=new i.Group;o.add(new c("SJOz3qjfQXU",0,0,240,0)),o.add(new c("Y2-xZ-1HE-Q",240,0,0,Math.PI/2)),o.add(new c("IrydklNpcFI",0,0,-240,Math.PI)),o.add(new c("9ubytEsCaS0",-240,0,0,-Math.PI/2)),t.add(o),(d=new a.default(e,n.domElement)).rotateSpeed=4,window.addEventListener("resize",s,!1);var l=document.getElementById("blocker");l.style.display="none",d.addEventListener("start",function(){l.style.display=""}),d.addEventListener("end",function(){l.style.display="none"})}(),l()}),o.default.createElement(o.default.Fragment,null,o.default.createElement("div",{id:"container"}),o.default.createElement("div",{id:"blocker"}))};var r=n(1),o=d(r),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(16)),a=d(n(62)),u=n(50);function d(e){return e&&e.__esModule?e:{default:e}}},385:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e,t,n,d,c,l=(0,r.useRef)(null),s=0,f=0,m=0,p=0,h=0,w=0,v=0,y=0,g=!1;function b(e){g=!0;var t=e.clientX||e.touches[0].clientX,n=e.clientY||e.touches[0].clientY;s=t,f=n,m=h,p=w;i.Object3D()}function M(e){if(!0===g){var t=e.clientX||e.touches[0].clientX,n=e.clientY||e.touches[0].clientY;h=.1*(s-t)+m,w=.1*(n-f)+p}}function E(){g=!1}var S=function(){e.aspect=window.innerWidth/window.innerHeight,e.updateProjectionMatrix(),n.setSize(window.innerWidth,window.innerHeight)};return(0,r.useEffect)(function(){window.addEventListener("resize",S,!1),l.current.addEventListener("mousedown",b,!1),l.current.addEventListener("mousemove",M,!1),l.current.addEventListener("mouseup",E,!1),(e=new i.PerspectiveCamera(75,window.innerWidth/window.innerHeight,1,1100)).target=new i.Vector3(0,0,0),t=new i.Scene;var r=new i.SphereBufferGeometry(500,60,40);r.scale(-1,1,1);var o=(new i.TextureLoader).load(u.default);c=new i.MeshBasicMaterial({map:o}),d=new i.Mesh(r,c);var s=new i.CylinderBufferGeometry(2,0,10),f=new i.MeshPhongMaterial({color:13408512}),m=new i.Mesh(s,f);m.position.set(55,0,0);var p=document.createElement("div");p.style.width="480px",p.style.height="360px",p.style.backgroundColor="#000";var g=document.createElement("iframe");g.style.width="480px",g.style.height="360px",g.style.border="0px",g.src=["https://www.youtube.com/embed/","gQSmv4S2-SA","?rel=0"].join(""),p.appendChild(g);var x=new a.CSS3DObject(p);x.position.set(200,0,0),x.rotation.y=0;var P=new i.Object3D;P.add(m),P.add(d),P.add(x),t.add(P),(n=new i.WebGLRenderer).setPixelRatio(window.devicePixelRatio),n.setSize(window.innerWidth,window.innerHeight),l.current.appendChild(n.domElement),function r(){requestAnimationFrame(r),w=Math.max(-85,Math.min(85,w)),v=i.Math.degToRad(90-w),y=i.Math.degToRad(h),e.target.x=500*Math.sin(v)*Math.cos(y),e.target.y=500*Math.cos(v),e.target.z=500*Math.sin(v)*Math.sin(y),e.lookAt(e.target),n.render(t,e)}()},[]),o.default.createElement("div",{className:"container",ref:l})};var r=n(1),o=d(r),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(16)),a=(d(n(62)),n(50)),u=d(n(78));function d(e){return e&&e.__esModule?e:{default:e}}},386:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return(0,r.useEffect)(function(){var e=new a.WebGLRenderer;e.setSize(800,800);var t=document.getElementById("view");t.appendChild(e.domElement);var n=new a.PerspectiveCamera(45,1,1,1e3);n.position.set(0,0,200);var r=new i.default(n,t);window.addEventListener("resize",function(){n.aspect=window.innerWidth/window.innerHeight,n.updateProjectionMatrix(),e.setSize(window.innerWidth,window.innerHeight)},!1);var o=a.ImageUtils.loadTexture(u.default),d=new a.Mesh(new a.SphereGeometry(50,32,32),new a.MeshBasicMaterial({map:o})),c=new a.Mesh(new a.CylinderGeometry(2,0,10),new a.MeshPhongMaterial({color:13408512}));c.position.set(55,0,0),c.quaternion.setFromUnitVectors(new a.Vector3(0,1,0),new a.Vector3(1,0,0));var l=new a.Object3D;l.add(c);var s=new a.Object3D;s.add(l),s.add(d);var f=new a.Scene;f.add(s);var m=new a.DirectionalLight(16777215);m.position.set(0,200,0),f.add(m);var p=Math.PI/180;l.quaternion.setFromEuler(new a.Euler(0,135*p,45*p,"YZX"));!function t(){requestAnimationFrame(t),s.rotation.y+=.005,r.update(),e.clear(),e.render(f,n)}(),navigator.geolocation.watchPosition(function(e){var t=e.coords.latitude,n=e.coords.longitude;l.quaternion.setFromEuler(new a.Euler(0,n*p,t*p,"YZX"))})},[]),o.default.createElement("div",{id:"view"})};var r=n(1),o=d(r),i=d(n(62)),a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(16)),u=(n(50),d(n(387)));function d(e){return e&&e.__esModule?e:{default:e}}},387:function(e,t,n){e.exports=n.p+"21ecbc9064b334592ae1e89fce314589.jpg"},388:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e,t,n,r,d,c,l,s,f=0,m=0,p=[],h=new a.Vector3(0,0,0);function w(e){f=e.clientX-l,m=e.clientY-s}function v(o){c.position.x+=.02*(f-c.position.x),c.position.y+=.02*(-m-c.position.y),p[0].position.x=200*Math.sin(.003*o),p[0].position.y=200*Math.cos(.002*o),t.updateMatrixWorld(),h.setFromMatrixPosition(c.matrixWorld),e.lookAt(h),n.render(t,e),d.render(r,e),requestAnimationFrame(v)}return(0,o.useEffect)(function(){!function(){l=window.innerWidth/2,s=window.innerHeight/2,(e=new a.PerspectiveCamera(45,window.innerWidth/window.innerHeight,1,2e3)).position.set(0,0,500),t=new a.Scene,r=new a.Scene;for(var o=0;o<50;o++){var i=document.createElement("div");i.style.width="100px",i.style.height="100px",i.style.opacity=.999,i.style.background=new a.Color(.21568627451*Math.random()+.462745098039,.21568627451*Math.random()+.462745098039,.21568627451*Math.random()+.462745098039).getStyle(),i.textContent="I am editable text!",i.setAttribute("contenteditable","");var f=new u.CSS3DObject(i);f.position.x=600*Math.random()-300,f.position.y=600*Math.random()-300,f.position.z=800*Math.random()-600,f.rotation.x=Math.random(),f.rotation.y=Math.random(),f.rotation.z=Math.random(),r.add(f),m=void 0,h=void 0,v=void 0,m=new a.MeshPhongMaterial({opacity:.2,color:new a.Color("black"),blending:a.NoBlending,side:a.DoubleSide}),h=new a.PlaneGeometry(100,100),(v=new a.Mesh(h,m)).position.copy(f.position),v.rotation.copy(f.rotation),v.castShadow=!1,v.receiveShadow=!0,t.add(v)}var m,h,v;!function(){var e=new a.MeshPhongMaterial({color:1401481,emissive:0,specular:1118481,side:a.DoubleSide,flatShading:!1,shininess:30}),n=new a.SphereGeometry(70,32,32);(c=new a.Mesh(n,e)).position.z=100,c.castShadow=!0,c.receiveShadow=!1,t.add(c)}(),y=new a.AmbientLight(0),t.add(y),p[0]=new a.PointLight(16777215,1,0),p[0].castShadow=!0,p[0].position.z=300,p[0].shadow.mapSize.width=256,p[0].shadow.mapSize.height=256,p[0].shadow.camera.near=1,p[0].shadow.camera.far=2e3,t.add(p[0]),(d=new u.CSS3DRenderer).setSize(window.innerWidth,window.innerHeight),d.domElement.style.position="absolute",d.domElement.style.top=0,document.querySelector("#css").appendChild(d.domElement),(n=new a.WebGLRenderer({alpha:!0,antialias:!0})).setClearColor(0,0),n.setPixelRatio(window.devicePixelRatio),n.setSize(window.innerWidth,window.innerHeight),n.shadowMap.enabled=!0,n.shadowMap.type=a.PCFSoftShadowMap,document.querySelector("#webgl").appendChild(n.domElement),document.addEventListener("mousemove",w,!1);var y}(),v(performance.now())},[]),i.default.createElement(i.default.Fragment,null,i.default.createElement("div",{id:"css"}),i.default.createElement("div",{id:"webgl"}))};var r,o=n(1),i=(r=o)&&r.__esModule?r:{default:r},a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(16)),u=n(50)},389:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e,t,n,m,p,h=(0,r.useRef)(null),w=new i.Vector3,v=90,y=0,g=0,b=0,M=95,E=5,S=0;function x(){e.aspect=window.innerWidth/window.innerHeight,e.updateProjectionMatrix(),n.setSize(window.innerWidth,window.innerHeight)}function P(e){e.preventDefault(),h.current.addEventListener("mousemove",_,!1),h.current.addEventListener("mouseup",L,!1)}function _(e){var t=e.movementX||e.mozMovementX||e.webkitMovementX||0,n=e.movementY||e.mozMovementY||e.webkitMovementY||0;v-=.1*t,y+=.1*n}function L(e){h.current.removeEventListener("mousemove",_),h.current.removeEventListener("mouseup",L)}function C(t){(S=e.fov+.05*(t.deltaY||t.originalEvent.deltaY))>=E&&S<=M&&(e.fov=S,e.updateProjectionMatrix())}function j(e){e.preventDefault();var t=e.touches[0];m=t.screenX,p=t.screenY}function O(e){e.preventDefault();var t=e.touches[0];v-=.1*(t.screenX-m),y+=.1*(t.screenY-p),m=t.screenX,p=t.screenY}function R(){requestAnimationFrame(R),console.log(e.fov),y=Math.max(-85,Math.min(85,y)),g=i.Math.degToRad(90-y),b=i.Math.degToRad(v),w.x=Math.sin(g)*Math.cos(b),w.y=Math.cos(g),w.z=Math.sin(g)*Math.sin(b),e.lookAt(w),n.render(t,e)}return(0,r.useEffect)(function(){e=new i.PerspectiveCamera(99,window.innerWidth/window.innerHeight,1,1e3),t=new i.Scene;for(var r=[{url:u.default,position:[-512,0,0],rotation:[0,Math.PI/2,0]},{url:d.default,position:[512,0,0],rotation:[0,-Math.PI/2,0]},{url:c.default,position:[0,512,0],rotation:[Math.PI/2,0,Math.PI]},{url:l.default,position:[0,-512,0],rotation:[-Math.PI/2,0,Math.PI]},{url:s.default,position:[0,0,512],rotation:[0,Math.PI,0]},{url:f.default,position:[0,0,-512],rotation:[0,0,0]}],o=0;o<r.length;o++){var m=r[o],p=document.createElement("img");p.width=1026,p.src=m.url,(w=new a.CSS3DObject(p)).position.fromArray(m.position),w.rotation.fromArray(m.rotation),t.add(w)}var w,v=document.createElement("iframe");v.width="500px",v.height="500px",v.src="https://www.youtube.com/embed/3EXrDJxJ3VY",v.frameBorder="0",v.allow="accelerometer",(w=new a.CSS3DObject(v)).position.fromArray([-512,0,0]),w.rotation.fromArray([0,Math.PI/2,0]),t.add(w);var y=document.createElement("div");y.className="card";var g=document.createElement("img");g.src="https://www.w3schools.com/howto/img_avatar.png",g.width="500px",g.height="500px";var b=document.createElement("div"),M=document.createElement("h4");M.append(document.createTextNode("John Doe"));var E=document.createElement("p");E.append(document.createTextNode("Architect & Engineer")),b.appendChild(M),b.appendChild(E),y.appendChild(g),y.appendChild(b);var S=new a.CSS3DObject(g);S.position.fromArray([512,0,0]),S.rotation.fromArray([0,-Math.PI/2,0]),t.add(S),(n=new a.CSS3DRenderer).setSize(window.innerWidth,window.innerHeight),h.current.appendChild(n.domElement),h.current.addEventListener("mousedown",P,!1),h.current.addEventListener("wheel",C,!1),h.current.addEventListener("touchstart",j,!1),h.current.addEventListener("touchmove",O,!1),window.addEventListener("resize",x,!1),R()},[]),o.default.createElement("div",{className:"container",ref:h})};var r=n(1),o=m(r),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(16)),a=(m(n(62)),n(50)),u=m(n(390)),d=m(n(391)),c=m(n(392)),l=m(n(393)),s=m(n(394)),f=m(n(395));function m(e){return e&&e.__esModule?e:{default:e}}},390:function(e,t,n){e.exports=n.p+"d79cc88f7015cbe5ba898f8aa9ebaaa2.jpg"},391:function(e,t,n){e.exports=n.p+"1e9c21d6c0ac179a522dddf4e048eac7.jpg"},392:function(e,t,n){e.exports=n.p+"6ece77d5132dd57345bd8030edf0d6f4.jpg"},393:function(e,t,n){e.exports=n.p+"de18040b4eb7646c417a0198ec05a37c.jpg"},394:function(e,t,n){e.exports=n.p+"0ce2142fc08a7770b8148d7c5c900703.jpg"},395:function(e,t,n){e.exports=n.p+"f53fa2b4babc652f5470563b5c80e637.jpg"},61:function(e,t,n){e.exports=n.p+"86395b284f131002c09c9a6d32bfde1b.jpg"},78:function(e,t,n){e.exports=n.p+"763dca84a8d87ddfcc15753a8b655275.jpg"}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=main.b63cec32748313092789.js.map