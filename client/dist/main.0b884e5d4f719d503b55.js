!function(e){function t(t){for(var r,i,u=t[0],c=t[1],l=t[2],f=0,s=[];f<u.length;f++)i=u[f],Object.prototype.hasOwnProperty.call(a,i)&&a[i]&&s.push(a[i][0]),a[i]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(e[r]=c[r]);for(d&&d(t);s.length;)s.shift()();return o.push.apply(o,l||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],r=!0,u=1;u<n.length;u++){var c=n[u];0!==a[c]&&(r=!1)}r&&(o.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},a={0:0},o=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var u=window.webpackJsonp=window.webpackJsonp||[],c=u.push.bind(u);u.push=t,u=u.slice();for(var l=0;l<u.length;l++)t(u[l]);var d=c;o.push([155,3,1,11,9,13,2,20,12,10,4,5,6,7,8,14,15,16,17,18,19]),n()}({105:function(e,t,n){e.exports=n.p+"b884a87b665154e14ba7a06f393fcb46.jpg"},106:function(e,t,n){e.exports=n.p+"86395b284f131002c09c9a6d32bfde1b.jpg"},107:function(e,t,n){e.exports=n.p+"4bd3f98c2d44c45145ddd31f463eab8b.jpg"},108:function(e,t,n){e.exports=n.p+"7eddcb9a916b1684ba1694dfe5fef212.jpg"},109:function(e,t,n){e.exports=n.p+"763dca84a8d87ddfcc15753a8b655275.jpg"},155:function(e,t,n){n(156),e.exports=n(358)},358:function(e,t,n){"use strict";var r=f(n(1)),a=f(n(360)),o=(f(n(364)),f(n(365))),i=n(367),u=f(n(372)),c=f(n(373)),l=f(n(375)),d=f(n(376));function f(e){return e&&e.__esModule?e:{default:e}}n(377),a.default.render(r.default.createElement(i.BrowserRouter,null,r.default.createElement(i.Switch,null,r.default.createElement(i.Route,{path:"/tech",component:d.default}),r.default.createElement(i.Route,{path:"/med",component:l.default}),r.default.createElement(i.Route,{path:"/tbl",component:c.default}),r.default.createElement(i.Route,{path:"/pure",component:u.default}),r.default.createElement(i.Route,{path:"/impure",component:o.default}),r.default.createElement(i.Route,{path:"/",component:c.default}))),document.querySelector("#root"))},364:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,a=!1,o=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{!r&&u.return&&u.return()}finally{if(a)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};t.default=function(){var e,t,n,p,m,v=!1,h=0,w=0,y=0,b=0,g=[u.default,c.default,l.default,d.default,f.default],E=(0,a.useState)(i.default),M=r(E,2),_=M[0];M[1];return(0,a.useEffect)(function(){p=document.querySelector(".container"),(e=new s.PerspectiveCamera(75,window.innerWidth/window.innerHeight,1,1100)).target=new s.Vector3(0,0,0),t=new s.Scene;var r=new s.SphereBufferGeometry(500,60,40);r.scale(-1,1,1);var a=(new s.TextureLoader).load(_),o=new s.MeshBasicMaterial({map:a});m=new s.Mesh(r,o),t.add(m),(n=new s.WebGLRenderer).setPixelRatio(window.devicePixelRatio),n.setSize(window.innerWidth,window.innerHeight),p.appendChild(n.domElement),function r(){requestAnimationFrame(r),!1===v&&(h+=.1),w=Math.max(-85,Math.min(85,w)),y=s.Math.degToRad(90-w),b=s.Math.degToRad(h),e.target.x=500*Math.sin(y)*Math.cos(b),e.target.y=500*Math.cos(y),e.target.z=500*Math.sin(y)*Math.sin(b),e.lookAt(e.target),n.render(t,e)}()},[_]),o.default.createElement("div",{className:"container",onLoad:function(e){}},o.default.createElement("div",{className:"sampleGallery"},function(){return g.map(function(e){return o.default.createElement("div",{className:"minibox",key:e,onClick:function(t){console.log("clickedItem",e)}},o.default.createElement("img",{src:e}))})}()))};var a=n(1),o=p(a),i=p(n(74)),u=p(n(105)),c=p(n(106)),l=p(n(107)),d=p(n(108)),f=p(n(109)),s=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(75));function p(e){return e&&e.__esModule?e:{default:e}}},365:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,a=!1,o=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{!r&&u.return&&u.return()}finally{if(a)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};t.default=function(){var e=[c.default,l.default,d.default,f.default,s.default],t=(0,a.useState)(u.default),n=r(t,2),p=n[0],m=n[1];return o.default.createElement("div",null,o.default.createElement(i.default,{image:p}),o.default.createElement("div",{className:"sampleGallery"},e.map(function(e){return o.default.createElement("div",{className:"minibox",key:e,onClick:function(t){m(e),console.log("clickedItem",e)}},o.default.createElement("img",{src:e}))})))};var a=n(1),o=p(a),i=p(n(366)),u=p(n(74)),c=p(n(105)),l=p(n(106)),d=p(n(107)),f=p(n(108)),s=p(n(109));function p(e){return e&&e.__esModule?e:{default:e}}},366:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t,n,r,u,c,l=e.image,d=!1,f=0,s=0,p=0,m=0;return(0,a.useEffect)(function(){u=document.querySelector(".container"),(t=new i.PerspectiveCamera(75,window.innerWidth/window.innerHeight,1,1100)).target=new i.Vector3(0,0,0),n=new i.Scene;var e=new i.SphereBufferGeometry(500,60,40);e.scale(-1,1,1);var a=(new i.TextureLoader).load(l),o=new i.MeshBasicMaterial({map:a});return c=new i.Mesh(e,o),n.add(c),(r=new i.WebGLRenderer).setPixelRatio(window.devicePixelRatio),r.setSize(window.innerWidth,window.innerHeight),u.appendChild(r.domElement),function e(){requestAnimationFrame(e),!1===d&&(f+=.1),s=Math.max(-85,Math.min(85,s)),p=i.Math.degToRad(90-s),m=i.Math.degToRad(f),t.target.x=500*Math.sin(p)*Math.cos(m),t.target.y=500*Math.cos(p),t.target.z=500*Math.sin(p)*Math.sin(m),t.lookAt(t.target),r.render(n,t)}(),function(){(u=document.querySelector(".container")).innerHTML=""}},[l]),o.default.createElement("div",{className:"container",onLoad:function(e){}})};var r,a=n(1),o=(r=a)&&r.__esModule?r:{default:r},i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(75))},372:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),o=u(a),i=u(n(74));function u(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"componentDidMount",value:function(){var e=this.refs.canvas,t=e.getContext("2d"),n=this.refs.image;n.onload=function(){t.drawImage(n,0,0),t.font="40px Courier",t.fillText("tarkesh2shar",210,75)};var r=e.toDataURL();console.log("dataurl",r)}},{key:"render",value:function(){return o.default.createElement("div",null,"da",o.default.createElement("canvas",{ref:"canvas",width:640,height:425}),o.default.createElement("img",{ref:"image",src:i.default,className:"hidden"}))}}]),t}();t.default=c},373:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,a=!1,o=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{!r&&u.return&&u.return()}finally{if(a)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};t.default=function(){var e=(0,a.useState)(u.default),t=r(e,2),n=t[0],c=t[1];return o.default.createElement("div",{className:"tbl_hell_Container"},o.default.createElement("div",{className:"tbl_image_container"},m.map(function(e){return o.default.createElement("div",{className:"minibox",key:e,onClick:function(t){c(e),console.log("clickedItem",e)}},o.default.createElement("img",{src:e}))})),o.default.createElement(i.default,{image:n}))};var a=n(1),o=p(a),i=p(n(374)),u=p(n(74)),c=p(n(105)),l=p(n(106)),d=p(n(107)),f=p(n(108)),s=p(n(109));function p(e){return e&&e.__esModule?e:{default:e}}var m=[c.default,l.default,d.default,f.default,s.default]},374:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t,n,r,u,c,l=e.image,d=(0,a.useRef)(null),f=0,s=0,p=0,m=0,v=0,h=0,w=0,y=0,b=!1,g=function(){t.aspect=window.innerWidth/window.innerHeight,t.updateProjectionMatrix(),r.setSize(window.innerWidth,window.innerHeight)};function E(e){b=!0;var t=e.clientX||e.touches[0].clientX,n=e.clientY||e.touches[0].clientY;f=t,s=n,m=p,h=v}function M(e){if(!0===b){var t=e.clientX||e.touches[0].clientX,n=e.clientY||e.touches[0].clientY;p=.1*(f-t)+m,v=.1*(n-s)+h}}function _(){b=!1}function O(e){var n=t.fov+.05*e.deltaY;t.fov=i.Math.clamp(n,10,75),t.updateProjectionMatrix()}function j(e){e.preventDefault();var t=new FileReader;t.addEventListener("load",function(e){c.map.image.src=e.target.result,c.map.needsUpdate=!0},!1),t.readAsDataURL(e.dataTransfer.files[0]),document.body.style.opacity=1}function x(e){e.preventDefault(),e.dataTransfer.dropEffect="copy"}function P(){document.body.style.opacity=1}function L(){document.body.style.opacity=.5}return(0,a.useEffect)(function(){window.addEventListener("resize",g,!1),d.current.addEventListener("mousedown",E,!1),d.current.addEventListener("mousemove",M,!1),d.current.addEventListener("mouseup",_,!1),d.current.addEventListener("touchstart",E,!1),d.current.addEventListener("touchmove",M,!1),d.current.addEventListener("touchend",_,!1),d.current.addEventListener("wheel",O,!1),d.current.addEventListener("dragenter",L,!1),d.current.addEventListener("dragleave",P,!1),d.current.addEventListener("dragover",x,!1),d.current.addEventListener("drop",j,!1),(t=new i.PerspectiveCamera(75,window.innerWidth/window.innerHeight,1,1100)).target=new i.Vector3(0,0,0),n=new i.Scene;var e=new i.SphereBufferGeometry(500,60,40);e.scale(-1,1,1);var a=(new i.TextureLoader).load(l);return c=new i.MeshBasicMaterial({map:a}),u=new i.Mesh(e,c),n.add(u),(r=new i.WebGLRenderer).setPixelRatio(window.devicePixelRatio),r.setSize(window.innerWidth,window.innerHeight),d.current.appendChild(r.domElement),function e(){requestAnimationFrame(e),!1===b&&(p+=.1),v=Math.max(-85,Math.min(85,v)),w=i.Math.degToRad(90-v),y=i.Math.degToRad(p),t.target.x=500*Math.sin(w)*Math.cos(y),t.target.y=500*Math.cos(w),t.target.z=500*Math.sin(w)*Math.sin(y),t.lookAt(t.target),r.render(n,t)}(),function(){window.removeEventListener("resize",g,!1),d.current.removeEventListener("mousedown",E,!1),d.current.removeEventListener("mousemove",M,!1),d.current.removeEventListener("mouseup",_,!1),d.current.removeEventListener("touchstart",E,!1),d.current.removeEventListener("touchmove",M,!1),d.current.removeEventListener("touchend",_,!1),d.current.removeEventListener("wheel",O,!1),d.current.removeEventListener("dragenter",L,!1),d.current.removeEventListener("dragleave",P,!1),d.current.removeEventListener("dragover",x,!1),d.current.removeEventListener("drop",j,!1),d.current.innerHTML=""}},[l]),o.default.createElement("div",{className:"container",ref:d})};var r,a=n(1),o=(r=a)&&r.__esModule?r:{default:r},i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(75))},375:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(1),i=(r=o)&&r.__esModule?r:{default:r},u=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(75));var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),a(t,[{key:"componentDidMount",value:function(){var e=new u.Scene,t=document.querySelector(".hell");console.log(t);var n=new u.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3),r=new u.WebGLRenderer;r.setSize(window.innerWidth,window.innerHeight),this.mount.appendChild(r.domElement);var a=new u.BoxGeometry(1,1,1),o=new u.MeshBasicMaterial({color:65280}),i=new u.Mesh(a,o);e.add(i),n.position.z=5;!function t(){requestAnimationFrame(t),i.rotation.x+=.01,i.rotation.y+=.01,r.render(e,n)}()}},{key:"render",value:function(){var e=this;return i.default.createElement("div",{className:"",ref:function(t){return e.mount=t}},"ds")}}]),t}();t.default=c},376:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.useEffect)(function(){return function(){}},[e]),o.default.createElement("div",null,"Dont worry!")};var r,a=n(1),o=(r=a)&&r.__esModule?r:{default:r}},74:function(e,t,n){e.exports=n.p+"86395b284f131002c09c9a6d32bfde1b.jpg"}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=main.0b884e5d4f719d503b55.js.map