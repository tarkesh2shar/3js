!function(e){function t(t){for(var r,i,u=t[0],c=t[1],l=t[2],f=0,s=[];f<u.length;f++)i=u[f],Object.prototype.hasOwnProperty.call(a,i)&&a[i]&&s.push(a[i][0]),a[i]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(e[r]=c[r]);for(d&&d(t);s.length;)s.shift()();return o.push.apply(o,l||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],r=!0,u=1;u<n.length;u++){var c=n[u];0!==a[c]&&(r=!1)}r&&(o.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},a={0:0},o=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var u=window.webpackJsonp=window.webpackJsonp||[],c=u.push.bind(u);u.push=t,u=u.slice();for(var l=0;l<u.length;l++)t(u[l]);var d=c;o.push([155,3,1,11,9,13,2,20,12,10,4,5,6,7,8,14,15,16,17,18,19]),n()}({105:function(e,t,n){e.exports=n.p+"b884a87b665154e14ba7a06f393fcb46.jpg"},106:function(e,t,n){e.exports=n.p+"86395b284f131002c09c9a6d32bfde1b.jpg"},107:function(e,t,n){e.exports=n.p+"4bd3f98c2d44c45145ddd31f463eab8b.jpg"},108:function(e,t,n){e.exports=n.p+"7eddcb9a916b1684ba1694dfe5fef212.jpg"},109:function(e,t,n){e.exports=n.p+"763dca84a8d87ddfcc15753a8b655275.jpg"},155:function(e,t,n){n(156),e.exports=n(358)},358:function(e,t,n){"use strict";var r=f(n(1)),a=f(n(360)),o=(f(n(364)),f(n(365))),i=n(367),u=f(n(372)),c=f(n(373)),l=f(n(375)),d=f(n(376));function f(e){return e&&e.__esModule?e:{default:e}}n(377),a.default.render(r.default.createElement(i.BrowserRouter,null,r.default.createElement(i.Switch,null,r.default.createElement(i.Route,{path:"/tech",component:d.default}),r.default.createElement(i.Route,{path:"/med",component:l.default}),r.default.createElement(i.Route,{path:"/tbl",component:c.default}),r.default.createElement(i.Route,{path:"/pure",component:u.default}),r.default.createElement(i.Route,{path:"/impure",component:o.default}),r.default.createElement(i.Route,{path:"/",component:c.default}))),document.querySelector("#root"))},364:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,a=!1,o=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{!r&&u.return&&u.return()}finally{if(a)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};t.default=function(){var e,t,n,p,m,v=!1,h=0,w=0,y=0,b=0,g=[u.default,c.default,l.default,d.default,f.default],E=(0,a.useState)(i.default),M=r(E,2),_=M[0];M[1];return(0,a.useEffect)(function(){p=document.querySelector(".container"),(e=new s.PerspectiveCamera(75,window.innerWidth/window.innerHeight,1,1100)).target=new s.Vector3(0,0,0),t=new s.Scene;var r=new s.SphereBufferGeometry(500,60,40);r.scale(-1,1,1);var a=(new s.TextureLoader).load(_),o=new s.MeshBasicMaterial({map:a});m=new s.Mesh(r,o),t.add(m),(n=new s.WebGLRenderer).setPixelRatio(window.devicePixelRatio),n.setSize(window.innerWidth,window.innerHeight),p.appendChild(n.domElement),function r(){requestAnimationFrame(r),!1===v&&(h+=.1),w=Math.max(-85,Math.min(85,w)),y=s.Math.degToRad(90-w),b=s.Math.degToRad(h),e.target.x=500*Math.sin(y)*Math.cos(b),e.target.y=500*Math.cos(y),e.target.z=500*Math.sin(y)*Math.sin(b),e.lookAt(e.target),n.render(t,e)}()},[_]),o.default.createElement("div",{className:"container",onLoad:function(e){}},o.default.createElement("div",{className:"sampleGallery"},function(){return g.map(function(e){return o.default.createElement("div",{className:"minibox",key:e,onClick:function(t){console.log("clickedItem",e)}},o.default.createElement("img",{src:e}))})}()))};var a=n(1),o=p(a),i=p(n(74)),u=p(n(105)),c=p(n(106)),l=p(n(107)),d=p(n(108)),f=p(n(109)),s=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(75));function p(e){return e&&e.__esModule?e:{default:e}}},365:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,a=!1,o=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{!r&&u.return&&u.return()}finally{if(a)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};t.default=function(){var e=[c.default,l.default,d.default,f.default,s.default],t=(0,a.useState)(u.default),n=r(t,2),p=n[0],m=n[1];return o.default.createElement("div",null,o.default.createElement(i.default,{image:p}),o.default.createElement("div",{className:"sampleGallery"},e.map(function(e){return o.default.createElement("div",{className:"minibox",key:e,onClick:function(t){m(e),console.log("clickedItem",e)}},o.default.createElement("img",{src:e}))})))};var a=n(1),o=p(a),i=p(n(366)),u=p(n(74)),c=p(n(105)),l=p(n(106)),d=p(n(107)),f=p(n(108)),s=p(n(109));function p(e){return e&&e.__esModule?e:{default:e}}},366:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t,n,r,u,c,l=e.image,d=!1,f=0,s=0,p=0,m=0;return(0,a.useEffect)(function(){u=document.querySelector(".container"),(t=new i.PerspectiveCamera(75,window.innerWidth/window.innerHeight,1,1100)).target=new i.Vector3(0,0,0),n=new i.Scene;var e=new i.SphereBufferGeometry(500,60,40);e.scale(-1,1,1);var a=(new i.TextureLoader).load(l),o=new i.MeshBasicMaterial({map:a});return c=new i.Mesh(e,o),n.add(c),(r=new i.WebGLRenderer).setPixelRatio(window.devicePixelRatio),r.setSize(window.innerWidth,window.innerHeight),u.appendChild(r.domElement),function e(){requestAnimationFrame(e),!1===d&&(f+=.1),s=Math.max(-85,Math.min(85,s)),p=i.Math.degToRad(90-s),m=i.Math.degToRad(f),t.target.x=500*Math.sin(p)*Math.cos(m),t.target.y=500*Math.cos(p),t.target.z=500*Math.sin(p)*Math.sin(m),t.lookAt(t.target),r.render(n,t)}(),function(){(u=document.querySelector(".container")).innerHTML=""}},[l]),o.default.createElement("div",{className:"container",onLoad:function(e){}})};var r,a=n(1),o=(r=a)&&r.__esModule?r:{default:r},i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(75))},372:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),o=u(a),i=u(n(74));function u(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),r(t,[{key:"componentDidMount",value:function(){var e=this.refs.canvas,t=e.getContext("2d"),n=this.refs.image;n.onload=function(){t.drawImage(n,0,0),t.font="40px Courier",t.fillText("tarkesh2shar",210,75)};var r=e.toDataURL();console.log("dataurl",r)}},{key:"render",value:function(){return o.default.createElement("div",null,"da",o.default.createElement("canvas",{ref:"canvas",width:640,height:425}),o.default.createElement("img",{ref:"image",src:i.default,className:"hidden"}))}}]),t}();t.default=c},373:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,a=!1,o=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{!r&&u.return&&u.return()}finally{if(a)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};t.default=function(){var e=(0,a.useState)(u.default),t=r(e,2),n=t[0],c=t[1];return o.default.createElement("div",{className:"tbl_hell_Container"},o.default.createElement("div",{className:"tbl_image_container"},m.map(function(e){return o.default.createElement("div",{className:"minibox",key:e,onClick:function(t){c(e),console.log("clickedItem",e)}},o.default.createElement("img",{src:e}))})),o.default.createElement(i.default,{image:n}))};var a=n(1),o=p(a),i=p(n(374)),u=p(n(74)),c=p(n(105)),l=p(n(106)),d=p(n(107)),f=p(n(108)),s=p(n(109));function p(e){return e&&e.__esModule?e:{default:e}}var m=[c.default,l.default,d.default,f.default,s.default]},374:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t,n,r,u,c,l=e.image,d=(0,a.useRef)(null),f=0,s=0,p=0,m=0,v=0,h=0,w=0,y=0,b=!1,g=function(){t.aspect=window.innerWidth/window.innerHeight,t.updateProjectionMatrix(),r.setSize(window.innerWidth,window.innerHeight)};function E(e){b=!0;var t=e.clientX||e.touches[0].clientX,n=e.clientY||e.touches[0].clientY;f=t,s=n,m=p,h=v}function M(e){if(!0===b){var t=e.clientX||e.touches[0].clientX,n=e.clientY||e.touches[0].clientY;p=.1*(f-t)+m,v=.1*(n-s)+h}}function _(){b=!1}function O(e){var n=t.fov+.05*e.deltaY;t.fov=i.Math.clamp(n,10,75),t.updateProjectionMatrix()}function j(e){e.preventDefault();var t=new FileReader;t.addEventListener("load",function(e){c.map.image.src=e.target.result,c.map.needsUpdate=!0},!1),t.readAsDataURL(e.dataTransfer.files[0]),document.body.style.opacity=1}function x(e){e.preventDefault(),e.dataTransfer.dropEffect="copy"}function P(){document.body.style.opacity=1}function L(){document.body.style.opacity=.5}return(0,a.useEffect)(function(){window.addEventListener("resize",g,!1),d.current.addEventListener("mousedown",E,!1),d.current.addEventListener("mousemove",M,!1),d.current.addEventListener("mouseup",_,!1),d.current.addEventListener("touchstart",E,!1),d.current.addEventListener("touchmove",M,!1),d.current.addEventListener("touchend",_,!1),document.addEventListener("wheel",O,!1),d.current.addEventListener("dragenter",L,!1),d.current.addEventListener("dragleave",P,!1),d.current.addEventListener("dragover",x,!1),d.current.addEventListener("drop",j,!1),(t=new i.PerspectiveCamera(75,window.innerWidth/window.innerHeight,1,1100)).target=new i.Vector3(0,0,0),n=new i.Scene;var e=new i.SphereBufferGeometry(500,60,40);e.scale(-1,1,1);var a=(new i.TextureLoader).load(l);return c=new i.MeshBasicMaterial({map:a}),u=new i.Mesh(e,c),n.add(u),(r=new i.WebGLRenderer).setPixelRatio(window.devicePixelRatio),r.setSize(window.innerWidth,window.innerHeight),d.current.appendChild(r.domElement),function e(){requestAnimationFrame(e),!1===b&&(p+=.1),v=Math.max(-85,Math.min(85,v)),w=i.Math.degToRad(90-v),y=i.Math.degToRad(p),t.target.x=500*Math.sin(w)*Math.cos(y),t.target.y=500*Math.cos(w),t.target.z=500*Math.sin(w)*Math.sin(y),t.lookAt(t.target),r.render(n,t)}(),function(){window.removeEventListener("resize",g,!1),d.current.removeEventListener("mousedown",E,!1),d.current.removeEventListener("mousemove",M,!1),d.current.removeEventListener("mouseup",_,!1),d.current.removeEventListener("touchstart",E,!1),d.current.removeEventListener("touchmove",M,!1),d.current.removeEventListener("touchend",_,!1),d.current.removeEventListener("dragenter",L,!1),d.current.removeEventListener("dragleave",P,!1),d.current.removeEventListener("dragover",x,!1),d.current.removeEventListener("drop",j,!1),d.current.innerHTML=""}},[l]),o.default.createElement("div",{className:"container",ref:d})};var r,a=n(1),o=(r=a)&&r.__esModule?r:{default:r},i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(75))},375:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(1),i=(r=o)&&r.__esModule?r:{default:r},u=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(75));var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),a(t,[{key:"componentDidMount",value:function(){var e=new u.Scene,t=document.querySelector(".hell");console.log(t);var n=new u.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3),r=new u.WebGLRenderer;r.setSize(window.innerWidth,window.innerHeight),this.mount.appendChild(r.domElement);var a=new u.BoxGeometry(1,1,1),o=new u.MeshBasicMaterial({color:65280}),i=new u.Mesh(a,o);e.add(i),n.position.z=5;!function t(){requestAnimationFrame(t),i.rotation.x+=.01,i.rotation.y+=.01,r.render(e,n)}()}},{key:"render",value:function(){var e=this;return i.default.createElement("div",{className:"",ref:function(t){return e.mount=t}},"ds")}}]),t}();t.default=c},376:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,a.useEffect)(function(){return function(){}},[e]),o.default.createElement("div",null,"Dont worry!")};var r,a=n(1),o=(r=a)&&r.__esModule?r:{default:r}},74:function(e,t,n){e.exports=n.p+"86395b284f131002c09c9a6d32bfde1b.jpg"}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NhbXBsZTIuanBnIiwid2VicGFjazovLy8uL2Fzc2V0cy9zYW1wbGUzLmpwZyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2FtcGxlNC5qcGciLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NhbXBsZTUuanBnIiwid2VicGFjazovLy8uL2Fzc2V0cy9zYW1wbGU2LmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvU2FtcGxlL0FwcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9JbXB1cmUvQXBwUmVmcmVzaC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9JbXB1cmUvY29udGFpbmVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3B1cmUvcHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy90YmwvdGJsLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3RibC9jYW52YXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTWVkaXVtL21lZGl1bS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy90ZWNoL2EuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NhbXBsZTEuanBnIl0sIm5hbWVzIjpbIndlYnBhY2tKc29ucENhbGxiYWNrIiwiZGF0YSIsIm1vZHVsZUlkIiwiY2h1bmtJZCIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJleGVjdXRlTW9kdWxlcyIsImkiLCJyZXNvbHZlcyIsImxlbmd0aCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImluc3RhbGxlZENodW5rcyIsInB1c2giLCJtb2R1bGVzIiwicGFyZW50SnNvbnBGdW5jdGlvbiIsInNoaWZ0IiwiZGVmZXJyZWRNb2R1bGVzIiwiYXBwbHkiLCJjaGVja0RlZmVycmVkTW9kdWxlcyIsInJlc3VsdCIsImRlZmVycmVkTW9kdWxlIiwiZnVsZmlsbGVkIiwiaiIsImRlcElkIiwic3BsaWNlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsInMiLCJpbnN0YWxsZWRNb2R1bGVzIiwiMCIsImV4cG9ydHMiLCJtb2R1bGUiLCJsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInAiLCJqc29ucEFycmF5Iiwid2luZG93Iiwib2xkSnNvbnBGdW5jdGlvbiIsInNsaWNlIiwiUmVhY3RET00iLCJyZW5kZXIiLCJCcm93c2VyUm91dGVyIiwiU3dpdGNoIiwiUm91dGUiLCJwYXRoIiwiY29tcG9uZW50IiwiVGVjaCIsIk1lZGl1bSIsIlRCTCIsIlB1cmUiLCJSZWZyZXNoQXBwIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY2FtZXJhIiwic2NlbmUiLCJyZW5kZXJlciIsImNvbnRhaW5lciIsIm1lc2giLCJpc1VzZXJJbnRlcmFjdGluZyIsImxvbiIsImxhdCIsInBoaSIsInRoZXRhIiwiaW1hZ2VzIiwiU2FtcGxlSW1hZ2UxIiwiU2FtcGxlSW1hZ2UyIiwiU2FtcGxlSW1hZ2UzIiwiU2FtcGxlSW1hZ2U0IiwiU2FtcGxlSW1hZ2U1IiwidXNlU3RhdGUiLCJTYW1wbGVJbWFnZSIsInN0YXRlIiwidXNlRWZmZWN0IiwiVEhSRUUiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInRhcmdldCIsIlZlY3RvcjMiLCJTY2VuZSIsImdlb21ldHJ5IiwiU3BoZXJlQnVmZmVyR2VvbWV0cnkiLCJzY2FsZSIsInRleHR1cmUiLCJUZXh0dXJlTG9hZGVyIiwibG9hZCIsIm1hdGVyaWFsIiwiTWVzaEJhc2ljTWF0ZXJpYWwiLCJtYXAiLCJNZXNoIiwiYWRkIiwiV2ViR0xSZW5kZXJlciIsInNldFBpeGVsUmF0aW8iLCJkZXZpY2VQaXhlbFJhdGlvIiwic2V0U2l6ZSIsImFwcGVuZENoaWxkIiwiZG9tRWxlbWVudCIsImFuaW1hdGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJNYXRoIiwibWF4IiwibWluIiwiZGVnVG9SYWQiLCJ4Iiwic2luIiwiY29zIiwieSIsInoiLCJsb29rQXQiLCJjbGFzc05hbWUiLCJvbkxvYWQiLCJlIiwiaXRlbSIsIm9uQ2xpY2siLCJjb25zb2xlIiwibG9nIiwic3JjIiwicmVuZGVyTGlzdG9mSXRlbXMiLCJzZXRzdGF0ZSIsImltYWdlIiwiaW5uZXJIVE1MIiwicHVyZSIsIkNvbXBvbmVudCIsImNhbnZhcyIsInRoaXMiLCJyZWZzIiwiY3R4IiwiZ2V0Q29udGV4dCIsImltZyIsIm9ubG9hZCIsImRyYXdJbWFnZSIsImZvbnQiLCJmaWxsVGV4dCIsImRhdGFVUkwiLCJ0b0RhdGFVUkwiLCJyZWYiLCJ3aWR0aCIsImhlaWdodCIsIkltYWdlIiwiY2FudmFzQ29udGFpbmVyIiwidXNlUmVmIiwib25Nb3VzZURvd25Nb3VzZVgiLCJvbk1vdXNlRG93bk1vdXNlWSIsIm9uTW91c2VEb3duTG9uIiwib25Nb3VzZURvd25MYXQiLCJvbldpbmRvd1Jlc2l6ZSIsImFzcGVjdCIsInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLCJvbk1vdXNlRG93biIsImV2ZW50IiwiY2xpZW50WCIsInRvdWNoZXMiLCJjbGllbnRZIiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlVXAiLCJvbkRvY3VtZW50TW91c2VXaGVlbCIsImZvdiIsImRlbHRhWSIsImNsYW1wIiwib25GaWxlRHJvcHBlZCIsInByZXZlbnREZWZhdWx0IiwicmVhZGVyIiwiRmlsZVJlYWRlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJuZWVkc1VwZGF0ZSIsInJlYWRBc0RhdGFVUkwiLCJkYXRhVHJhbnNmZXIiLCJmaWxlcyIsImJvZHkiLCJzdHlsZSIsIm9wYWNpdHkiLCJvbkRyYWdPdmVyIiwiZHJvcEVmZmVjdCIsIm9uRHJhZ0xlYXZlIiwib25EcmFnRW50ZXIiLCJjdXJyZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIkFwcCIsImhlbGwiLCJtb3VudCIsIkJveEdlb21ldHJ5IiwiY29sb3IiLCJjdWJlIiwicG9zaXRpb24iLCJyb3RhdGlvbiIsInNzc3MiXSwibWFwcGluZ3MiOiJhQUNFLFNBQVNBLEVBQXFCQyxHQVE3QixJQVBBLElBTUlDLEVBQVVDLEVBTlZDLEVBQVdILEVBQUssR0FDaEJJLEVBQWNKLEVBQUssR0FDbkJLLEVBQWlCTCxFQUFLLEdBSUhNLEVBQUksRUFBR0MsRUFBVyxHQUNwQ0QsRUFBSUgsRUFBU0ssT0FBUUYsSUFDekJKLEVBQVVDLEVBQVNHLEdBQ2hCRyxPQUFPQyxVQUFVQyxlQUFlQyxLQUFLQyxFQUFpQlgsSUFBWVcsRUFBZ0JYLElBQ3BGSyxFQUFTTyxLQUFLRCxFQUFnQlgsR0FBUyxJQUV4Q1csRUFBZ0JYLEdBQVcsRUFFNUIsSUFBSUQsS0FBWUcsRUFDWkssT0FBT0MsVUFBVUMsZUFBZUMsS0FBS1IsRUFBYUgsS0FDcERjLEVBQVFkLEdBQVlHLEVBQVlILElBS2xDLElBRkdlLEdBQXFCQSxFQUFvQmhCLEdBRXRDTyxFQUFTQyxRQUNkRCxFQUFTVSxPQUFUVixHQU9ELE9BSEFXLEVBQWdCSixLQUFLSyxNQUFNRCxFQUFpQmIsR0FBa0IsSUFHdkRlLElBRVIsU0FBU0EsSUFFUixJQURBLElBQUlDLEVBQ0lmLEVBQUksRUFBR0EsRUFBSVksRUFBZ0JWLE9BQVFGLElBQUssQ0FHL0MsSUFGQSxJQUFJZ0IsRUFBaUJKLEVBQWdCWixHQUNqQ2lCLEdBQVksRUFDUkMsRUFBSSxFQUFHQSxFQUFJRixFQUFlZCxPQUFRZ0IsSUFBSyxDQUM5QyxJQUFJQyxFQUFRSCxFQUFlRSxHQUNHLElBQTNCWCxFQUFnQlksS0FBY0YsR0FBWSxHQUUzQ0EsSUFDRkws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UnBDLEksRUFBQSxPLG9DQUVZbEUsRSx3SkFBWixRLDZVQ0ZBLE8sb0NBRVlBLEUsd0pBQVosTyxJQUNxQndHLEUsOHFCQUFZdkQsYSwrQ0FHN0IsSUFBSXBFLEVBQVEsSUFBSW1CLEVBQU1NLE1BRWxCbUcsRUFBTy9ILFNBQVNDLGNBQWMsU0FFbEM4RCxRQUFRQyxJQUFJK0QsR0FFWixJQUFJN0gsRUFBUyxJQUFJb0IsRUFBTUMsa0JBQ3JCLEdBQ0F0QyxPQUFPdUMsV0FBYXZDLE9BQU93QyxZQUMzQixHQUNBLEtBRUVyQixFQUFXLElBQUlrQixFQUFNa0IsY0FDekJwQyxFQUFTdUMsUUFBUTFELE9BQU91QyxXQUFZdkMsT0FBT3dDLGFBRTNDZ0QsS0FBS3VELE1BQU1wRixZQUFZeEMsRUFBU3lDLFlBQ2hDLElBQUloQixFQUFXLElBQUlQLEVBQU0yRyxZQUFZLEVBQUcsRUFBRyxHQUN2QzlGLEVBQVcsSUFBSWIsRUFBTWMsa0JBQWtCLENBQUU4RixNQUFPLFFBQ2hEQyxFQUFPLElBQUk3RyxFQUFNZ0IsS0FBS1QsRUFBVU0sR0FDcENoQyxFQUFNb0MsSUFBSTRGLEdBQ1ZqSSxFQUFPa0ksU0FBUzVFLEVBQUksR0FDTixTQUFWVixJQUNGQyxzQkFBc0JELEdBQ3RCcUYsRUFBS0UsU0FBU2pGLEdBQUssSUFDbkIrRSxFQUFLRSxTQUFTOUUsR0FBSyxJQUNuQm5ELEVBQVNmLE9BQU9jLEVBQU9ELEdBRXpCNEMsSywrQkFHTyxXQUNQLE9BQ0UsK0JBQUtZLFVBQVUsR0FBRzBCLElBQUssbUJBQVEsRUFBSzRDLE1BQVE1QyxJQUE1QyxVLGVBbkNlMEMsRyw0RkNETixTQUFXUSxHQUl4QixPQUhBLElBQUFqSCxXQUFVLFdBQ1IsT0FBTyxjQUNOLENBQUNpSCxJQUNHLG1EQU5ULEksRUFBQSxPLHdEQ0FBaEwsRUFBT0QsUUFBVSxJQUEwQiIsImZpbGUiOiJtYWluLmM4ZTg0NTlmNDU0NmM4M2JkYzViLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSnNvbnBDYWxsYmFjayhkYXRhKSB7XG4gXHRcdHZhciBjaHVua0lkcyA9IGRhdGFbMF07XG4gXHRcdHZhciBtb3JlTW9kdWxlcyA9IGRhdGFbMV07XG4gXHRcdHZhciBleGVjdXRlTW9kdWxlcyA9IGRhdGFbMl07XG5cbiBcdFx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG4gXHRcdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuIFx0XHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwLCByZXNvbHZlcyA9IFtdO1xuIFx0XHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdHJlc29sdmVzLnB1c2goaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKTtcbiBcdFx0XHR9XG4gXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcbiBcdFx0fVxuIFx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmKHBhcmVudEpzb25wRnVuY3Rpb24pIHBhcmVudEpzb25wRnVuY3Rpb24oZGF0YSk7XG5cbiBcdFx0d2hpbGUocmVzb2x2ZXMubGVuZ3RoKSB7XG4gXHRcdFx0cmVzb2x2ZXMuc2hpZnQoKSgpO1xuIFx0XHR9XG5cbiBcdFx0Ly8gYWRkIGVudHJ5IG1vZHVsZXMgZnJvbSBsb2FkZWQgY2h1bmsgdG8gZGVmZXJyZWQgbGlzdFxuIFx0XHRkZWZlcnJlZE1vZHVsZXMucHVzaC5hcHBseShkZWZlcnJlZE1vZHVsZXMsIGV4ZWN1dGVNb2R1bGVzIHx8IFtdKTtcblxuIFx0XHQvLyBydW4gZGVmZXJyZWQgbW9kdWxlcyB3aGVuIGFsbCBjaHVua3MgcmVhZHlcbiBcdFx0cmV0dXJuIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCk7XG4gXHR9O1xuIFx0ZnVuY3Rpb24gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKSB7XG4gXHRcdHZhciByZXN1bHQ7XG4gXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHR2YXIgZGVmZXJyZWRNb2R1bGUgPSBkZWZlcnJlZE1vZHVsZXNbaV07XG4gXHRcdFx0dmFyIGZ1bGZpbGxlZCA9IHRydWU7XG4gXHRcdFx0Zm9yKHZhciBqID0gMTsgaiA8IGRlZmVycmVkTW9kdWxlLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHR2YXIgZGVwSWQgPSBkZWZlcnJlZE1vZHVsZVtqXTtcbiBcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rc1tkZXBJZF0gIT09IDApIGZ1bGZpbGxlZCA9IGZhbHNlO1xuIFx0XHRcdH1cbiBcdFx0XHRpZihmdWxmaWxsZWQpIHtcbiBcdFx0XHRcdGRlZmVycmVkTW9kdWxlcy5zcGxpY2UoaS0tLCAxKTtcbiBcdFx0XHRcdHJlc3VsdCA9IF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gZGVmZXJyZWRNb2R1bGVbMF0pO1xuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdHJldHVybiByZXN1bHQ7XG4gXHR9XG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4gXHQvLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbiBcdC8vIFByb21pc2UgPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG4gXHR2YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuIFx0XHQwOiAwXG4gXHR9O1xuXG4gXHR2YXIgZGVmZXJyZWRNb2R1bGVzID0gW107XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdHZhciBqc29ucEFycmF5ID0gd2luZG93W1wid2VicGFja0pzb25wXCJdID0gd2luZG93W1wid2VicGFja0pzb25wXCJdIHx8IFtdO1xuIFx0dmFyIG9sZEpzb25wRnVuY3Rpb24gPSBqc29ucEFycmF5LnB1c2guYmluZChqc29ucEFycmF5KTtcbiBcdGpzb25wQXJyYXkucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrO1xuIFx0anNvbnBBcnJheSA9IGpzb25wQXJyYXkuc2xpY2UoKTtcbiBcdGZvcih2YXIgaSA9IDA7IGkgPCBqc29ucEFycmF5Lmxlbmd0aDsgaSsrKSB3ZWJwYWNrSnNvbnBDYWxsYmFjayhqc29ucEFycmF5W2ldKTtcbiBcdHZhciBwYXJlbnRKc29ucEZ1bmN0aW9uID0gb2xkSnNvbnBGdW5jdGlvbjtcblxuXG4gXHQvLyBhZGQgZW50cnkgbW9kdWxlIHRvIGRlZmVycmVkIGxpc3RcbiBcdGRlZmVycmVkTW9kdWxlcy5wdXNoKFsxNTUsMywxLDExLDksMTMsMiwyMCwxMiwxMCw0LDUsNiw3LDgsMTQsMTUsMTYsMTcsMTgsMTldKTtcbiBcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gcmVhZHlcbiBcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYjg4NGE4N2I2NjUxNTRlMTRiYTdhMDZmMzkzZmNiNDYuanBnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiODYzOTViMjg0ZjEzMTAwMmMwOWM5YTZkMzJiZmRlMWIuanBnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNGJkM2Y5OGMyZDQ0YzQ1MTQ1ZGRkMzFmNDYzZWFiOGIuanBnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiN2VkZGNiOWE5MTZiMTY4NGJhMTY5NGRmZTVmZWYyMTIuanBnXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNzYzZGNhODRhOGQ4N2RkZmNjMTU3NTNhOGI2NTUyNzUuanBnXCI7IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xyXG5pbXBvcnQgQXBwIGZyb20gXCIuL2NvbXBvbmVudHMvU2FtcGxlL0FwcFwiO1xyXG5pbXBvcnQgUmVmcmVzaEFwcCBmcm9tIFwiLi9jb21wb25lbnRzL0ltcHVyZS9BcHBSZWZyZXNoXCI7XHJcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIsIFJvdXRlLCBTd2l0Y2ggfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xyXG5pbXBvcnQgUHVyZSBmcm9tIFwiLi4vc3JjL2NvbXBvbmVudHMvcHVyZS9wdXJlXCI7XHJcbmltcG9ydCBUQkwgZnJvbSBcIi4uL3NyYy9jb21wb25lbnRzL3RibC90YmwuanNcIjtcclxuaW1wb3J0IE1lZGl1bSBmcm9tIFwiLi4vc3JjL2NvbXBvbmVudHMvTWVkaXVtL21lZGl1bVwiO1xyXG5pbXBvcnQgVGVjaCBmcm9tIFwiLi4vc3JjL2NvbXBvbmVudHMvdGVjaC9hXCI7XHJcbmltcG9ydCBcIi4vaW5kZXguY3NzXCI7XHJcblxyXG5SZWFjdERPTS5yZW5kZXIoXHJcbiAgPEJyb3dzZXJSb3V0ZXI+XHJcbiAgICA8U3dpdGNoPlxyXG4gICAgICA8Um91dGUgcGF0aD1cIi90ZWNoXCIgY29tcG9uZW50PXtUZWNofSAvPlxyXG4gICAgICA8Um91dGUgcGF0aD1cIi9tZWRcIiBjb21wb25lbnQ9e01lZGl1bX0gLz5cclxuICAgICAgPFJvdXRlIHBhdGg9XCIvdGJsXCIgY29tcG9uZW50PXtUQkx9IC8+XHJcbiAgICAgIDxSb3V0ZSBwYXRoPVwiL3B1cmVcIiBjb21wb25lbnQ9e1B1cmV9IC8+XHJcbiAgICAgIDxSb3V0ZSBwYXRoPVwiL2ltcHVyZVwiIGNvbXBvbmVudD17UmVmcmVzaEFwcH0gLz5cclxuICAgICAgPFJvdXRlIHBhdGg9XCIvXCIgY29tcG9uZW50PXtUQkx9IC8+XHJcbiAgICA8L1N3aXRjaD5cclxuICA8L0Jyb3dzZXJSb3V0ZXI+LFxyXG5cclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Jvb3RcIilcclxuKTtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFNhbXBsZUltYWdlIGZyb20gXCIuLi8uLi8uLi9hc3NldHMvc2FtcGxlMS5qcGdcIjtcclxuaW1wb3J0IFNhbXBsZUltYWdlMSBmcm9tIFwiLi4vLi4vLi4vYXNzZXRzL3NhbXBsZTIuanBnXCI7XHJcbmltcG9ydCBTYW1wbGVJbWFnZTIgZnJvbSBcIi4uLy4uLy4uL2Fzc2V0cy9zYW1wbGUzLmpwZ1wiO1xyXG5pbXBvcnQgU2FtcGxlSW1hZ2UzIGZyb20gXCIuLi8uLi8uLi9hc3NldHMvc2FtcGxlNC5qcGdcIjtcclxuaW1wb3J0IFNhbXBsZUltYWdlNCBmcm9tIFwiLi4vLi4vLi4vYXNzZXRzL3NhbXBsZTUuanBnXCI7XHJcbmltcG9ydCBTYW1wbGVJbWFnZTUgZnJvbSBcIi4uLy4uLy4uL2Fzc2V0cy9zYW1wbGU2LmpwZ1wiO1xyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tIFwidGhyZWVcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFwcCgpIHtcclxuICB2YXIgY2FtZXJhLCBzY2VuZSwgcmVuZGVyZXIsIGNvbnRhaW5lciwgbWVzaDtcclxuXHJcbiAgdmFyIGlzVXNlckludGVyYWN0aW5nID0gZmFsc2UsXHJcbiAgICBsb24gPSAwLFxyXG4gICAgbGF0ID0gMCxcclxuICAgIHBoaSA9IDAsXHJcbiAgICB0aGV0YSA9IDA7XHJcblxyXG4gIHZhciBpbWFnZXMgPSBbXHJcbiAgICBTYW1wbGVJbWFnZTEsXHJcbiAgICBTYW1wbGVJbWFnZTIsXHJcbiAgICBTYW1wbGVJbWFnZTMsXHJcbiAgICBTYW1wbGVJbWFnZTQsXHJcbiAgICBTYW1wbGVJbWFnZTVcclxuICBdO1xyXG5cclxuICBjb25zdCBbc3RhdGUsIHNldHN0YXRlXSA9IHVzZVN0YXRlKFNhbXBsZUltYWdlKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIC8vZ2V0IHRoZSBjb250YWluZXJcclxuXHJcbiAgICBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNvbnRhaW5lclwiKTtcclxuXHJcbiAgICAvL3NldHRpbmcgQ2FtZXJhXHJcbiAgICBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoXHJcbiAgICAgIDc1LFxyXG4gICAgICB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCxcclxuICAgICAgMSxcclxuICAgICAgMTEwMFxyXG4gICAgKTtcclxuICAgIGNhbWVyYS50YXJnZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCAwKTtcclxuICAgIC8vc2V0dGluZyBTY2VuZVxyXG4gICAgc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcclxuXHJcbiAgICB2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuU3BoZXJlQnVmZmVyR2VvbWV0cnkoNTAwLCA2MCwgNDApO1xyXG4gICAgLy8gaW52ZXJ0IHRoZSBnZW9tZXRyeSBvbiB0aGUgeC1heGlzIHNvIHRoYXQgYWxsIG9mIHRoZSBmYWNlcyBwb2ludCBpbndhcmRcclxuICAgIGdlb21ldHJ5LnNjYWxlKC0xLCAxLCAxKTtcclxuXHJcbiAgICB2YXIgdGV4dHVyZSA9IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKCkubG9hZChzdGF0ZSk7XHJcbiAgICB2YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoeyBtYXA6IHRleHR1cmUgfSk7XHJcbiAgICBtZXNoID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuICAgIHNjZW5lLmFkZChtZXNoKTtcclxuXHJcbiAgICAvL1NldHRpbmcgU2NlbmVcclxuICAgIHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoKTtcclxuICAgIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xyXG4gICAgcmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcclxuXHJcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudCk7XHJcblxyXG4gICAgLy8gYSBzdXBlciBiaWcgZnVuY3Rpb24gaGVyZS8vXHJcbiAgICBmdW5jdGlvbiBhbmltYXRlKCkge1xyXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XHJcbiAgICAgIHVwZGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcclxuICAgICAgaWYgKGlzVXNlckludGVyYWN0aW5nID09PSBmYWxzZSkge1xyXG4gICAgICAgIGxvbiArPSAwLjE7XHJcbiAgICAgIH1cclxuICAgICAgbGF0ID0gTWF0aC5tYXgoLTg1LCBNYXRoLm1pbig4NSwgbGF0KSk7XHJcbiAgICAgIHBoaSA9IFRIUkVFLk1hdGguZGVnVG9SYWQoOTAgLSBsYXQpO1xyXG4gICAgICB0aGV0YSA9IFRIUkVFLk1hdGguZGVnVG9SYWQobG9uKTtcclxuICAgICAgY2FtZXJhLnRhcmdldC54ID0gNTAwICogTWF0aC5zaW4ocGhpKSAqIE1hdGguY29zKHRoZXRhKTtcclxuICAgICAgY2FtZXJhLnRhcmdldC55ID0gNTAwICogTWF0aC5jb3MocGhpKTtcclxuICAgICAgY2FtZXJhLnRhcmdldC56ID0gNTAwICogTWF0aC5zaW4ocGhpKSAqIE1hdGguc2luKHRoZXRhKTtcclxuICAgICAgY2FtZXJhLmxvb2tBdChjYW1lcmEudGFyZ2V0KTtcclxuICAgICAgLypcclxuICAgICAgICAvLyBkaXN0b3J0aW9uXHJcbiAgICAgICAgY2FtZXJhLnBvc2l0aW9uLmNvcHkoIGNhbWVyYS50YXJnZXQgKS5uZWdhdGUoKTtcclxuICAgICAgICAqL1xyXG4gICAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XHJcbiAgICB9XHJcbiAgICBhbmltYXRlKCk7XHJcbiAgfSwgW3N0YXRlXSk7XHJcblxyXG4gIGZ1bmN0aW9uIHJlbmRlckxpc3RvZkl0ZW1zKCkge1xyXG4gICAgcmV0dXJuIGltYWdlcy5tYXAoaXRlbSA9PiB7XHJcbiAgICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY2xhc3NOYW1lPVwibWluaWJveFwiXHJcbiAgICAgICAgICBrZXk9e2l0ZW19XHJcbiAgICAgICAgICBvbkNsaWNrPXtlID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJjbGlja2VkSXRlbVwiLCBpdGVtKTtcclxuICAgICAgICAgIH19XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPGltZyBzcmM9e2l0ZW19IC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiIG9uTG9hZD17ZSA9PiB7fX0+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2FtcGxlR2FsbGVyeVwiPntyZW5kZXJMaXN0b2ZJdGVtcygpfTwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG4vKlxyXG4gICAgICAgIFRvIGFjdHVhbGx5IGJlIGFibGUgdG8gZGlzcGxheSBhbnl0aGluZyB3aXRoIHRocmVlLmpzLFxyXG4gICAgICAgICB3ZSBuZWVkIHRocmVlIHRoaW5nczogXHJcbiAgICAgICAgIHNjZW5lLCBjYW1lcmEgYW5kIHJlbmRlcmVyLFxyXG4gICAgICAgICBzbyB0aGF0IHdlIGNhbiByZW5kZXIgdGhlIFxyXG4gICAgICAgICBzY2VuZSB3aXRoIGNhbWVyYS5cclxuXHJcblxyXG4gICAgICAgICovXHJcblxyXG4vLyBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG4vLyBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoXHJcbi8vICAgNzUsXHJcbi8vICAgd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQsXHJcbi8vICAgMC4xLFxyXG4vLyAgIDEwMDBcclxuLy8gKTtcclxuLy8gdmFyIHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoKTtcclxuLy8gdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29udGFpbmVyXCIpO1xyXG4vLyBjb250YWluZXIuYXBwZW5kKHJlbmRlcmVyLmRvbUVsZW1lbnQpO1xyXG5cclxuLy8gZnVuY3Rpb24gYW5pbWF0ZSgpIHtcclxuLy8gICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XHJcbi8vICAgdXBkYXRlKCk7XHJcbi8vIH1cclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBDb250YWluZXIgZnJvbSBcIi4vY29udGFpbmVyXCI7XHJcbmltcG9ydCBTYW1wbGVJbWFnZSBmcm9tIFwiLi4vLi4vLi4vYXNzZXRzL3NhbXBsZTEuanBnXCI7XHJcblxyXG5pbXBvcnQgU2FtcGxlSW1hZ2UxIGZyb20gXCIuLi8uLi8uLi9hc3NldHMvc2FtcGxlMi5qcGdcIjtcclxuaW1wb3J0IFNhbXBsZUltYWdlMiBmcm9tIFwiLi4vLi4vLi4vYXNzZXRzL3NhbXBsZTMuanBnXCI7XHJcbmltcG9ydCBTYW1wbGVJbWFnZTMgZnJvbSBcIi4uLy4uLy4uL2Fzc2V0cy9zYW1wbGU0LmpwZ1wiO1xyXG5pbXBvcnQgU2FtcGxlSW1hZ2U0IGZyb20gXCIuLi8uLi8uLi9hc3NldHMvc2FtcGxlNS5qcGdcIjtcclxuaW1wb3J0IFNhbXBsZUltYWdlNSBmcm9tIFwiLi4vLi4vLi4vYXNzZXRzL3NhbXBsZTYuanBnXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBcHBSZWZyZXNoKCkge1xyXG4gIHZhciBpbWFnZXMgPSBbXHJcbiAgICBTYW1wbGVJbWFnZTEsXHJcbiAgICBTYW1wbGVJbWFnZTIsXHJcbiAgICBTYW1wbGVJbWFnZTMsXHJcbiAgICBTYW1wbGVJbWFnZTQsXHJcbiAgICBTYW1wbGVJbWFnZTVcclxuICBdO1xyXG5cclxuICBjb25zdCBbc3RhdGUsIHNldHN0YXRlXSA9IHVzZVN0YXRlKFNhbXBsZUltYWdlKTtcclxuXHJcbiAgZnVuY3Rpb24gcmVuZGVyTGlzdG9mSXRlbXMoKSB7XHJcbiAgICByZXR1cm4gaW1hZ2VzLm1hcChpdGVtID0+IHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2XHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJtaW5pYm94XCJcclxuICAgICAgICAgIGtleT17aXRlbX1cclxuICAgICAgICAgIG9uQ2xpY2s9e2UgPT4ge1xyXG4gICAgICAgICAgICBzZXRzdGF0ZShpdGVtKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJjbGlja2VkSXRlbVwiLCBpdGVtKTtcclxuICAgICAgICAgIH19XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPGltZyBzcmM9e2l0ZW19IC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2PlxyXG4gICAgICA8Q29udGFpbmVyIGltYWdlPXtzdGF0ZX0gLz5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzYW1wbGVHYWxsZXJ5XCI+e3JlbmRlckxpc3RvZkl0ZW1zKCl9PC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59XHJcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSBcInRocmVlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250YWluZXIoeyBpbWFnZSB9KSB7XHJcbiAgdmFyIGNhbWVyYSwgc2NlbmUsIHJlbmRlcmVyLCBjb250YWluZXIsIG1lc2g7XHJcblxyXG4gIHZhciBpc1VzZXJJbnRlcmFjdGluZyA9IGZhbHNlLFxyXG4gICAgbG9uID0gMCxcclxuICAgIGxhdCA9IDAsXHJcbiAgICBwaGkgPSAwLFxyXG4gICAgdGhldGEgPSAwO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgLy9nZXQgdGhlIGNvbnRhaW5lclxyXG5cclxuICAgIGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29udGFpbmVyXCIpO1xyXG5cclxuICAgIC8vc2V0dGluZyBDYW1lcmFcclxuICAgIGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYShcclxuICAgICAgNzUsXHJcbiAgICAgIHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LFxyXG4gICAgICAxLFxyXG4gICAgICAxMTAwXHJcbiAgICApO1xyXG4gICAgY2FtZXJhLnRhcmdldCA9IG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIDApO1xyXG4gICAgLy9zZXR0aW5nIFNjZW5lXHJcbiAgICBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG5cclxuICAgIHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5TcGhlcmVCdWZmZXJHZW9tZXRyeSg1MDAsIDYwLCA0MCk7XHJcbiAgICAvLyBpbnZlcnQgdGhlIGdlb21ldHJ5IG9uIHRoZSB4LWF4aXMgc28gdGhhdCBhbGwgb2YgdGhlIGZhY2VzIHBvaW50IGlud2FyZFxyXG4gICAgZ2VvbWV0cnkuc2NhbGUoLTEsIDEsIDEpO1xyXG5cclxuICAgIHZhciB0ZXh0dXJlID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKS5sb2FkKGltYWdlKTtcclxuICAgIHZhciBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7IG1hcDogdGV4dHVyZSB9KTtcclxuICAgIG1lc2ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG4gICAgc2NlbmUuYWRkKG1lc2gpO1xyXG5cclxuICAgIC8vU2V0dGluZyBTY2VuZVxyXG4gICAgcmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlcigpO1xyXG4gICAgcmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XHJcbiAgICByZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG5cclxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChyZW5kZXJlci5kb21FbGVtZW50KTtcclxuXHJcbiAgICAvLyBhIHN1cGVyIGJpZyBmdW5jdGlvbiBoZXJlLy9cclxuICAgIGZ1bmN0aW9uIGFuaW1hdGUoKSB7XHJcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcclxuICAgICAgdXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdXBkYXRlKCkge1xyXG4gICAgICBpZiAoaXNVc2VySW50ZXJhY3RpbmcgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgbG9uICs9IDAuMTtcclxuICAgICAgfVxyXG4gICAgICBsYXQgPSBNYXRoLm1heCgtODUsIE1hdGgubWluKDg1LCBsYXQpKTtcclxuICAgICAgcGhpID0gVEhSRUUuTWF0aC5kZWdUb1JhZCg5MCAtIGxhdCk7XHJcbiAgICAgIHRoZXRhID0gVEhSRUUuTWF0aC5kZWdUb1JhZChsb24pO1xyXG4gICAgICBjYW1lcmEudGFyZ2V0LnggPSA1MDAgKiBNYXRoLnNpbihwaGkpICogTWF0aC5jb3ModGhldGEpO1xyXG4gICAgICBjYW1lcmEudGFyZ2V0LnkgPSA1MDAgKiBNYXRoLmNvcyhwaGkpO1xyXG4gICAgICBjYW1lcmEudGFyZ2V0LnogPSA1MDAgKiBNYXRoLnNpbihwaGkpICogTWF0aC5zaW4odGhldGEpO1xyXG4gICAgICBjYW1lcmEubG9va0F0KGNhbWVyYS50YXJnZXQpO1xyXG4gICAgICAvKlxyXG4gICAgICAgICAgICAvLyBkaXN0b3J0aW9uXHJcbiAgICAgICAgICAgIGNhbWVyYS5wb3NpdGlvbi5jb3B5KCBjYW1lcmEudGFyZ2V0ICkubmVnYXRlKCk7XHJcbiAgICAgICAgICAgICovXHJcbiAgICAgIHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKTtcclxuICAgIH1cclxuICAgIGFuaW1hdGUoKTtcclxuXHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNvbnRhaW5lclwiKTtcclxuICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICB9O1xyXG4gIH0sIFtpbWFnZV0pO1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiIG9uTG9hZD17ZSA9PiB7fX0+XHJcbiAgICAgIHsvKiA8ZGl2IGNsYXNzTmFtZT1cInNhbXBsZUdhbGxlcnlcIj57cmVuZGVyTGlzdG9mSXRlbXMoKX08L2Rpdj4gKi99XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59XHJcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFNhbXBsZUltYWdlIGZyb20gXCIuLi8uLi8uLi9hc3NldHMvc2FtcGxlMS5qcGdcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHB1cmUgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgY29uc3QgY2FudmFzID0gdGhpcy5yZWZzLmNhbnZhcztcclxuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICBjb25zdCBpbWcgPSB0aGlzLnJlZnMuaW1hZ2U7XHJcblxyXG4gICAgaW1nLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIDAsIDApO1xyXG4gICAgICBjdHguZm9udCA9IFwiNDBweCBDb3VyaWVyXCI7XHJcbiAgICAgIGN0eC5maWxsVGV4dChcInRhcmtlc2gyc2hhclwiLCAyMTAsIDc1KTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgZGF0YVVSTCA9IGNhbnZhcy50b0RhdGFVUkwoKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhcImRhdGF1cmxcIiwgZGF0YVVSTCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIGRhXHJcbiAgICAgICAgPGNhbnZhcyByZWY9XCJjYW52YXNcIiB3aWR0aD17NjQwfSBoZWlnaHQ9ezQyNX0gLz5cclxuICAgICAgICA8aW1nIHJlZj1cImltYWdlXCIgc3JjPXtTYW1wbGVJbWFnZX0gY2xhc3NOYW1lPVwiaGlkZGVuXCIgLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IENhbnZhc0NvbnRyb2xsZXIgZnJvbSBcIi4vY2FudmFzXCI7XHJcbmltcG9ydCBJbWFnZSBmcm9tIFwiLi4vLi4vLi4vYXNzZXRzL3NhbXBsZTEuanBnXCI7XHJcblxyXG5pbXBvcnQgU2FtcGxlSW1hZ2UxIGZyb20gXCIuLi8uLi8uLi9hc3NldHMvc2FtcGxlMi5qcGdcIjtcclxuaW1wb3J0IFNhbXBsZUltYWdlMiBmcm9tIFwiLi4vLi4vLi4vYXNzZXRzL3NhbXBsZTMuanBnXCI7XHJcbmltcG9ydCBTYW1wbGVJbWFnZTMgZnJvbSBcIi4uLy4uLy4uL2Fzc2V0cy9zYW1wbGU0LmpwZ1wiO1xyXG5pbXBvcnQgU2FtcGxlSW1hZ2U0IGZyb20gXCIuLi8uLi8uLi9hc3NldHMvc2FtcGxlNS5qcGdcIjtcclxuaW1wb3J0IFNhbXBsZUltYWdlNSBmcm9tIFwiLi4vLi4vLi4vYXNzZXRzL3NhbXBsZTYuanBnXCI7XHJcblxyXG52YXIgaW1hZ2VzID0gW1xyXG4gIFNhbXBsZUltYWdlMSxcclxuICBTYW1wbGVJbWFnZTIsXHJcbiAgU2FtcGxlSW1hZ2UzLFxyXG4gIFNhbXBsZUltYWdlNCxcclxuICBTYW1wbGVJbWFnZTVcclxuXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRibCgpIHtcclxuICBmdW5jdGlvbiByZW5kZXJMaXN0b2ZJdGVtcygpIHtcclxuICAgIHJldHVybiBpbWFnZXMubWFwKGl0ZW0gPT4ge1xyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXZcclxuICAgICAgICAgIGNsYXNzTmFtZT1cIm1pbmlib3hcIlxyXG4gICAgICAgICAga2V5PXtpdGVtfVxyXG4gICAgICAgICAgb25DbGljaz17ZSA9PiB7XHJcbiAgICAgICAgICAgIHNldHN0YXRlKGl0ZW0pO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImNsaWNrZWRJdGVtXCIsIGl0ZW0pO1xyXG4gICAgICAgICAgfX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8aW1nIHNyYz17aXRlbX0gLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBjb25zdCBbc3RhdGUsIHNldHN0YXRlXSA9IHVzZVN0YXRlKEltYWdlKTtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ0YmxfaGVsbF9Db250YWluZXJcIj5cclxuICAgICAgey8qIFdlIG5lZWQgdHdvIHRoaW5ncyBoZXJlICovfVxyXG5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YmxfaW1hZ2VfY29udGFpbmVyXCI+e3JlbmRlckxpc3RvZkl0ZW1zKCl9PC9kaXY+XHJcblxyXG4gICAgICA8Q2FudmFzQ29udHJvbGxlciBpbWFnZT17c3RhdGV9IC8+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59XHJcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VSZWYsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicmVhY3RcIjtcclxuLy9nZXQgZXZlcnl0aGluZyBmcm9tIHRocmVlLmpzLy8gaG9seSBzaGl0XHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gXCJ0aHJlZVwiO1xyXG5cclxuLy9pbXBvcnQgeyBvbldpbmRvd1Jlc2l6ZSB9IGZyb20gXCIuLi9ldmVudERlZmluYXRpb25zXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYW52YXMoeyBpbWFnZSB9KSB7XHJcbiAgY29uc3QgY2FudmFzQ29udGFpbmVyID0gdXNlUmVmKG51bGwpO1xyXG5cclxuICAvL3ZhcmlhYmxlIGRlY2xhcmF0aW9uc1xyXG4gIHZhciBjYW1lcmEsIHNjZW5lLCByZW5kZXJlciwgbWVzaDtcclxuXHJcbiAgdmFyIG9uTW91c2VEb3duTW91c2VYID0gMCxcclxuICAgIG9uTW91c2VEb3duTW91c2VZID0gMCxcclxuICAgIGxvbiA9IDAsXHJcbiAgICBvbk1vdXNlRG93bkxvbiA9IDAsXHJcbiAgICBsYXQgPSAwLFxyXG4gICAgb25Nb3VzZURvd25MYXQgPSAwLFxyXG4gICAgcGhpID0gMCxcclxuICAgIHRoZXRhID0gMCxcclxuICAgIGlzVXNlckludGVyYWN0aW5nID0gZmFsc2U7XHJcblxyXG4gIHZhciBtYXRlcmlhbDtcclxuXHJcbiAgdmFyIG9uV2luZG93UmVzaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgICBjYW1lcmEuYXNwZWN0ID0gd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbiAgICBjYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG4gICAgcmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBvbk1vdXNlRG93bihldmVudCkge1xyXG4gICAgaXNVc2VySW50ZXJhY3RpbmcgPSB0cnVlO1xyXG4gICAgLy9nZXQgdGhlIHggYW5kIHkgY29vcmRpbmF0ZXMgZnJvbSAgc2NyZWVuXHJcbiAgICB2YXIgY2xpZW50WCA9IGV2ZW50LmNsaWVudFggfHwgZXZlbnQudG91Y2hlc1swXS5jbGllbnRYO1xyXG4gICAgdmFyIGNsaWVudFkgPSBldmVudC5jbGllbnRZIHx8IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WTtcclxuXHJcbiAgICAvL3RoZSBmb2xsb3dpbmcgdHdvIHZhcmlibGVzIHdpbGwgYmUgdXNlZCAgZm9yIG1vdXNlIG1vdmUgICAhISEhIGV2ZW50cyAhISEhXHJcbiAgICBvbk1vdXNlRG93bk1vdXNlWCA9IGNsaWVudFg7XHJcbiAgICBvbk1vdXNlRG93bk1vdXNlWSA9IGNsaWVudFk7XHJcbiAgICAvL2dldCB0aGUgY3VycmVudCBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlIG9mIHRoZSBnbG9iZS9zcGhlcmljYWwgc3VyZmFjZSEhISEhIVxyXG4gICAgb25Nb3VzZURvd25Mb24gPSBsb247XHJcbiAgICBvbk1vdXNlRG93bkxhdCA9IGxhdDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG9uTW91c2VNb3ZlKGV2ZW50KSB7XHJcbiAgICBpZiAoaXNVc2VySW50ZXJhY3RpbmcgPT09IHRydWUpIHtcclxuICAgICAgLy9vbmx5IGlmIHVzZXIgY29udHJvbHMgdGhlIGNhbWVyYVxyXG5cclxuICAgICAgLy90aGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHdpdGggbmV3IHggYW5kIHkgY29vcmRpbmF0ZWQgdm9pbGEhIVxyXG5cclxuICAgICAgdmFyIGNsaWVudFggPSBldmVudC5jbGllbnRYIHx8IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WDtcclxuICAgICAgdmFyIGNsaWVudFkgPSBldmVudC5jbGllbnRZIHx8IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WTtcclxuXHJcbiAgICAgIC8vd2hpbGUgdGhlIG1vdXNlIHdlcmUga2VwdCBkb3duICB3ZSB0b29rIGEgcmVjb3JkIG9mIHRoZWlyIHBhc3QgeCBhbmQgeSBjb29yZGluYXRlZFxyXG4gICAgICAvL3dlIGFkZCB0aGVtIHRvIHRoZSBjdXJyZW50IHggYW5kIHkgY29vcmRpbmF0ZXNcclxuICAgICAgLy9sb24gPW5ld2xvbmdpdHVkZSArIG9sZGxvbmdpdHVkZVxyXG5cclxuICAgICAgLy8ob25Nb3VzZURvd25Nb3VzZVggLSBjbGllbnRYKSAqIDAuMSBjb250cm9scyBob3cgZmFzdCBtdXN0IHdlIHR1cm4gdXAgYW5kIGRvd25cclxuICAgICAgLy9tdWx0aXBseWluZyBieSAwLjEgd2lsbCBzbG93IGRvd24gdGhlIHJvdGF0aW9uXHJcblxyXG4gICAgICAvL2hvdyBmYXIgdGhlIGNhbWVyYSBuZWVkIHRvIHRyYXZlbCwgdGhlIHNhbWUgYXMgdGhlIGRpc3RhbmNlIHRyYXZlbGxlZCBieSB0aGUgbW91c2VcclxuICAgICAgbG9uID0gKG9uTW91c2VEb3duTW91c2VYIC0gY2xpZW50WCkgKiAwLjEgKyBvbk1vdXNlRG93bkxvbjtcclxuICAgICAgbGF0ID0gKGNsaWVudFkgLSBvbk1vdXNlRG93bk1vdXNlWSkgKiAwLjEgKyBvbk1vdXNlRG93bkxhdDtcclxuICAgIH1cclxuICB9XHJcbiAgZnVuY3Rpb24gb25Nb3VzZVVwKCkge1xyXG4gICAgaXNVc2VySW50ZXJhY3RpbmcgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG9uRG9jdW1lbnRNb3VzZVdoZWVsKGV2ZW50KSB7XHJcbiAgICAvL3doZW4gbW91c2Ugd2hlZWwgaXMgYWx0ZXJlZCB3ZSBqdXN0IG5lZWQgdG8gY29udHJvbCB0aGUgZmllbGQgb2YgdmlzaW9uIGluIHRoZSBzY2VuZVxyXG4gICAgLy9jdXJyZW50IGZvdiArIGZyYWN0aW9uYWwgcGFydCB0byBub3QgZ28gY3JhenlcclxuXHJcbiAgICAvLyBhbGVydChcInNhZFwiKTtcclxuICAgIHZhciBmb3YgPSBjYW1lcmEuZm92ICsgZXZlbnQuZGVsdGFZICogMC4wNTtcclxuICAgIGNhbWVyYS5mb3YgPSBUSFJFRS5NYXRoLmNsYW1wKGZvdiwgMTAsIDc1KTtcclxuICAgIC8vY2FsbCB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uIGZvciAgdXBkYXRpbmcgdGhlIGNhbWVyYVxyXG4gICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG9uRmlsZURyb3BwZWQoZXZlbnQpIHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgIHJlYWRlci5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgICBcImxvYWRcIixcclxuICAgICAgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICBtYXRlcmlhbC5tYXAuaW1hZ2Uuc3JjID0gZXZlbnQudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICBtYXRlcmlhbC5tYXAubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICB9LFxyXG4gICAgICBmYWxzZVxyXG4gICAgKTtcclxuICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGV2ZW50LmRhdGFUcmFuc2Zlci5maWxlc1swXSk7XHJcbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm9wYWNpdHkgPSAxO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gb25EcmFnT3ZlcihldmVudCkge1xyXG4gICAgLy9hbGxvdyBkcm9wIGJhc2ljYWxseSAhISEhXHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgIC8vY3Vyc29yIGNvcHlcclxuICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gXCJjb3B5XCI7XHJcblxyXG4gICAgLy9jb3B5IHdoYXRldmVyIGlzIHNlbmQgb24gaXQgLy9cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG9uRHJhZ0xlYXZlKCkge1xyXG4gICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vcGFjaXR5ID0gMTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG9uRHJhZ0VudGVyKCkge1xyXG4gICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vcGFjaXR5ID0gMC41O1xyXG4gIH1cclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIC8vdGhpcyB3aWxsIHJ1biBqdXN0IDEgdGltZVxyXG4gICAgLy9nb29kIHBsYWNlIGZvciBpbml0aWFsaXphdGlvblxyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vZXZlbnQgYmFzZWQgZnVuY3Rpb25zIGNhbGxpbmcgaGVyZS8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIG9uV2luZG93UmVzaXplLCBmYWxzZSk7XHJcbiAgICAvL21vdXNlIG1vdmUgZXZlbnRzXHJcbiAgICBjYW52YXNDb250YWluZXIuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIG9uTW91c2VEb3duLCBmYWxzZSk7XHJcbiAgICBjYW52YXNDb250YWluZXIuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG9uTW91c2VNb3ZlLCBmYWxzZSk7XHJcbiAgICBjYW52YXNDb250YWluZXIuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBvbk1vdXNlVXAsIGZhbHNlKTtcclxuXHJcbiAgICAvL3RvdWNoIGRldmljZXMgIG5vIGNsaWNrIGF2YWlsYWJsZSB0aGVyZSB1bmZvcnR1bmF0ZWx5IHdvd3cgc28gd29uZGVyZnVsICEhISEhISFcclxuICAgIGNhbnZhc0NvbnRhaW5lci5jdXJyZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIG9uTW91c2VEb3duLCBmYWxzZSk7XHJcbiAgICBjYW52YXNDb250YWluZXIuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIG9uTW91c2VNb3ZlLCBmYWxzZSk7XHJcbiAgICBjYW52YXNDb250YWluZXIuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgb25Nb3VzZVVwLCBmYWxzZSk7XHJcblxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIndoZWVsXCIsIG9uRG9jdW1lbnRNb3VzZVdoZWVsLCBmYWxzZSk7XHJcblxyXG4gICAgLy9sZXRzIGNvbnRyb2wgdGhlIGNvb2xlc3QgZWZmZWN0IGF2YWlsYWJsZSBoZXJlIC8vL1xyXG4gICAgLy8gZHJhZyBhbmQgZHJvcCBuZXcgaW1hZ2VzKSlcclxuXHJcbiAgICBjYW52YXNDb250YWluZXIuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ2VudGVyXCIsIG9uRHJhZ0VudGVyLCBmYWxzZSk7XHJcbiAgICBjYW52YXNDb250YWluZXIuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ2xlYXZlXCIsIG9uRHJhZ0xlYXZlLCBmYWxzZSk7XHJcblxyXG4gICAgY2FudmFzQ29udGFpbmVyLmN1cnJlbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdvdmVyXCIsIG9uRHJhZ092ZXIsIGZhbHNlKTtcclxuXHJcbiAgICBjYW52YXNDb250YWluZXIuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJvcFwiLCBvbkZpbGVEcm9wcGVkLCBmYWxzZSk7XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgLy9kZWZpbmUgd2hpY2ggdHlwZSBvZiBjYW1lcmEgLCAtLS0tLT4gM2Qgd29ybGQgbGlrZSBvciByaXNlIG9mIGxlZ2VuZHMgbGlrZSA/XHJcbiAgICBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoXHJcbiAgICAgIDc1LCAvL2ZpZWxkIG9mIHZpc2lvblxyXG4gICAgICB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCwgLy9hc3BlY3QgcmF0aW9cclxuICAgICAgMSwgLy9taW4gZGlzdGFuY2UgZnJvbSBjYW1lcmFcclxuICAgICAgMTEwMCAvL21heCBkaXN0YW5jZSBmcm9tIGNhbWVyYVxyXG4gICAgKTtcclxuXHJcbiAgICAvL3doYXQgdGhlIGhlbGwgaXMgdGhpcyA/XHJcblxyXG4gICAgLy9zbyB0aGlzIGlzIGEgMyBkaW1lbnNpb25zIHBsb3RcclxuICAgIGNhbWVyYS50YXJnZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCAwKTtcclxuXHJcbiAgICAvL1NjZW5lcyBhbGxvdyB5b3UgdG8gc2V0IHVwIHdoYXQgYW5kIHdoZXJlIGlzXHJcbiAgICAvL3RvIGJlIHJlbmRlcmVkIGJ5IHRocmVlLmpzLlxyXG4gICAgLy8gVGhpcyBpcyB3aGVyZSB5b3UgcGxhY2Ugb2JqZWN0cywgbGlnaHRzIGFuZCBjYW1lcmFzLlxyXG5cclxuICAgIC8vYmFzaWNhbGx5IGEgd29ybGQgc29ydCBvZiA/Pz8/P1xyXG5cclxuICAgIHNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XHJcblxyXG4gICAgLy9Ib2x5IHNoaXQgISEgZXhwbGFpbmF0aW9uIHBsZWFzZSBzb21lb25lIGFueW9uZSAhISFcclxuXHJcbiAgICAvLyBiYXNpY2FsbHkgQW4gZWZmaWNpZW50IHJlcHJlc2VudGF0aW9uIG9mIG1lc2gsIGxpbmUsIG9yIHBvaW50IGdlb21ldHJ5XHJcblxyXG4gICAgdmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLlNwaGVyZUJ1ZmZlckdlb21ldHJ5KDUwMCwgNjAsIDQwKTtcclxuICAgIC8vY3JlYXRpbmcgYSBzcGVoZXJlIGdlb21ldHJ5XHJcbiAgICAvLyBpbnZlcnQgdGhlIGdlb21ldHJ5IG9uIHRoZSB4LWF4aXMgc28gdGhhdCBhbGwgb2YgdGhlIGZhY2VzIHBvaW50IGlud2FyZFxyXG4gICAgZ2VvbWV0cnkuc2NhbGUoLTEsIDEsIDEpO1xyXG5cclxuICAgIC8vYmFzaWNhbGx5IGxpa2UgYSBicmljayApICByZXBlYXRlZCBzdHVmZiAvL1xyXG4gICAgdmFyIHRleHR1cmUgPSBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlcigpLmxvYWQoaW1hZ2UpO1xyXG5cclxuICAgIC8vQSBtYXRlcmlhbCBmb3IgZHJhd2luZyBnZW9tZXRyaWVzIGluIGEgc2ltcGxlIHNoYWRlZCAoZmxhdCBvciB3aXJlZnJhbWUpIHdheS5cclxuICAgIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKHsgbWFwOiB0ZXh0dXJlIH0pO1xyXG5cclxuICAgIC8vc2VlIHRoZSBkb2xwaGluIGluIHRoZSBnaXZlbiBsaW5rIDEgKXRoZSBzaGFwZSAgaXMgZGVmaW5lZCBieSBnZW9tZXRyeVxyXG4gICAgLy9hbmQgdGhlIG1hdGVyaWFsIHVzZWQgdGhlcmUgaW4gdGhlIGZvcm0gb2YgdHJpYW5nZSBzZWUgPyEhIVxyXG4gICAgLy9odHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Qb2x5Z29uX21lc2hcclxuICAgIG1lc2ggPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG4gICAgLy93b3d3ICEhISBzbyBiYXNpY2FsbHkgd2UgZ2VuZXJhdGVkIGEgc3BlaGVyZSB3aXRoIG91ciB0ZXh0dXJlIChBcyBhbiBpbWFnZSBvZmZjb3VyY2UhISEpXHJcbiAgICAvL2FkZCB0aGlzIG1lc2ggdG8gb3VyIHdvcmxkIG9mIGEgc29ydCAhIVxyXG4gICAgc2NlbmUuYWRkKG1lc2gpO1xyXG5cclxuICAgIC8vd2ViZ2wgY29tZXMgaW50byBhY3Rpb24gaGVyZSB3b3d3ISFcclxuXHJcbiAgICAvL2Jhc2ljIHNldHRpbmdzIGhlcmUhIVxyXG5cclxuICAgIHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoKTtcclxuICAgIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xyXG4gICAgcmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcclxuICAgIC8vICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XHJcblxyXG4gICAgLy9hZGQgdGhlIGNhbnZhcyBpbnNpZGUgdGhlIGNhbnZhcyBjb250YWluZXJcclxuICAgIGNhbnZhc0NvbnRhaW5lci5jdXJyZW50LmFwcGVuZENoaWxkKHJlbmRlcmVyLmRvbUVsZW1lbnQpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGFuaW1hdGUoKSB7XHJcbiAgICAgIC8vYmFzaWNhbGx5IGEgbG9vcCBmb3JldmVyIGVuam95ICEhIVxyXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XHJcbiAgICAgIHVwZGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcclxuICAgICAgaWYgKGlzVXNlckludGVyYWN0aW5nID09PSBmYWxzZSkge1xyXG4gICAgICAgIGxvbiArPSAwLjE7XHJcbiAgICAgICAgLy8vICBsYXQgKz0gMC4xO1xyXG4gICAgICB9XHJcbiAgICAgIGxhdCA9IE1hdGgubWF4KC04NSwgTWF0aC5taW4oODUsIGxhdCkpO1xyXG4gICAgICBwaGkgPSBUSFJFRS5NYXRoLmRlZ1RvUmFkKDkwIC0gbGF0KTtcclxuICAgICAgdGhldGEgPSBUSFJFRS5NYXRoLmRlZ1RvUmFkKGxvbik7XHJcblxyXG4gICAgICBjYW1lcmEudGFyZ2V0LnggPSA1MDAgKiBNYXRoLnNpbihwaGkpICogTWF0aC5jb3ModGhldGEpO1xyXG4gICAgICBjYW1lcmEudGFyZ2V0LnkgPSA1MDAgKiBNYXRoLmNvcyhwaGkpO1xyXG4gICAgICBjYW1lcmEudGFyZ2V0LnogPSA1MDAgKiBNYXRoLnNpbihwaGkpICogTWF0aC5zaW4odGhldGEpO1xyXG5cclxuICAgICAgY2FtZXJhLmxvb2tBdChjYW1lcmEudGFyZ2V0KTtcclxuICAgICAgLypcclxuICAgICAgICAvL3VuY29tbWVudCB0aGlzIHRvIGdldCB0byBhIHNwaGVyaWNhbCBpbndhcmQgcG9pbnRlZCBzcGhlcmVcclxuICAgICAgICAgICAgLy8gZGlzdG9ydGlvblxyXG4gICAgICAgICAgICBjYW1lcmEucG9zaXRpb24uY29weSggY2FtZXJhLnRhcmdldCApLm5lZ2F0ZSgpO1xyXG4gICAgICAgICAgICAqL1xyXG4gICAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XHJcbiAgICB9XHJcblxyXG4gICAgYW5pbWF0ZSgpOyAvL2NhbGwgZm9yIGxvb3BcclxuXHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAvL3RoaXMgaXMgZm9yIGNsZWFuIFVwIHB1cnBvc2VzIHRvIGRvbnQgY2xhdHRlciBvdXIgVUlcclxuXHJcbiAgICAgIC8vRmlyc3QgcmVtb3ZlIGFsbCBldmVudCBsaXN0bmVyc1xyXG5cclxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgb25XaW5kb3dSZXNpemUsIGZhbHNlKTtcclxuICAgICAgY2FudmFzQ29udGFpbmVyLmN1cnJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICBcIm1vdXNlZG93blwiLFxyXG4gICAgICAgIG9uTW91c2VEb3duLFxyXG4gICAgICAgIGZhbHNlXHJcbiAgICAgICk7XHJcbiAgICAgIGNhbnZhc0NvbnRhaW5lci5jdXJyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgXCJtb3VzZW1vdmVcIixcclxuICAgICAgICBvbk1vdXNlTW92ZSxcclxuICAgICAgICBmYWxzZVxyXG4gICAgICApO1xyXG4gICAgICBjYW52YXNDb250YWluZXIuY3VycmVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBvbk1vdXNlVXAsIGZhbHNlKTtcclxuICAgICAgY2FudmFzQ29udGFpbmVyLmN1cnJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICBcInRvdWNoc3RhcnRcIixcclxuICAgICAgICBvbk1vdXNlRG93bixcclxuICAgICAgICBmYWxzZVxyXG4gICAgICApO1xyXG4gICAgICBjYW52YXNDb250YWluZXIuY3VycmVudC5yZW1vdmVFdmVudExpc3RlbmVyKFxyXG4gICAgICAgIFwidG91Y2htb3ZlXCIsXHJcbiAgICAgICAgb25Nb3VzZU1vdmUsXHJcbiAgICAgICAgZmFsc2VcclxuICAgICAgKTtcclxuICAgICAgY2FudmFzQ29udGFpbmVyLmN1cnJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIG9uTW91c2VVcCwgZmFsc2UpO1xyXG4gICAgICAvLyBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgb25Eb2N1bWVudE1vdXNlV2hlZWwsIGZhbHNlKTtcclxuICAgICAgY2FudmFzQ29udGFpbmVyLmN1cnJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICBcImRyYWdlbnRlclwiLFxyXG4gICAgICAgIG9uRHJhZ0VudGVyLFxyXG4gICAgICAgIGZhbHNlXHJcbiAgICAgICk7XHJcbiAgICAgIGNhbnZhc0NvbnRhaW5lci5jdXJyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgXCJkcmFnbGVhdmVcIixcclxuICAgICAgICBvbkRyYWdMZWF2ZSxcclxuICAgICAgICBmYWxzZVxyXG4gICAgICApO1xyXG4gICAgICBjYW52YXNDb250YWluZXIuY3VycmVudC5yZW1vdmVFdmVudExpc3RlbmVyKFxyXG4gICAgICAgIFwiZHJhZ292ZXJcIixcclxuICAgICAgICBvbkRyYWdPdmVyLFxyXG4gICAgICAgIGZhbHNlXHJcbiAgICAgICk7XHJcbiAgICAgIGNhbnZhc0NvbnRhaW5lci5jdXJyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJkcm9wXCIsIG9uRmlsZURyb3BwZWQsIGZhbHNlKTtcclxuXHJcbiAgICAgIC8vcmVtb3ZlIHRoZSBjYW52YXMgaXRzZWxmO1xyXG5cclxuICAgICAgY2FudmFzQ29udGFpbmVyLmN1cnJlbnQuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgIH07XHJcbiAgfSwgW2ltYWdlXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiIHJlZj17Y2FudmFzQ29udGFpbmVyfT5cclxuICAgICAgey8qIDxkaXYgY2xhc3NOYW1lPVwic2FtcGxlR2FsbGVyeVwiPntyZW5kZXJMaXN0b2ZJdGVtcygpfTwvZGl2PiAqL31cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSBcInRocmVlXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAvLyA9PT0gVEhSRUUuSlMgQ09ERSBTVEFSVCA9PT1cclxuICAgIHZhciBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG5cclxuICAgIHZhciBoZWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5oZWxsXCIpO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGhlbGwpO1xyXG5cclxuICAgIHZhciBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoXHJcbiAgICAgIDc1LFxyXG4gICAgICB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCxcclxuICAgICAgMC4xLFxyXG4gICAgICAxMDAwXHJcbiAgICApO1xyXG4gICAgdmFyIHJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoKTtcclxuICAgIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XHJcblxyXG4gICAgdGhpcy5tb3VudC5hcHBlbmRDaGlsZChyZW5kZXJlci5kb21FbGVtZW50KTtcclxuICAgIHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgxLCAxLCAxKTtcclxuICAgIHZhciBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7IGNvbG9yOiAweDAwZmYwMCB9KTtcclxuICAgIHZhciBjdWJlID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuICAgIHNjZW5lLmFkZChjdWJlKTtcclxuICAgIGNhbWVyYS5wb3NpdGlvbi56ID0gNTtcclxuICAgIHZhciBhbmltYXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcclxuICAgICAgY3ViZS5yb3RhdGlvbi54ICs9IDAuMDE7XHJcbiAgICAgIGN1YmUucm90YXRpb24ueSArPSAwLjAxO1xyXG4gICAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XHJcbiAgICB9O1xyXG4gICAgYW5pbWF0ZSgpO1xyXG4gICAgLy8gPT09IFRIUkVFLkpTIEVYQU1QTEUgQ09ERSBFTkQgPT09XHJcbiAgfVxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiXCIgcmVmPXtyZWYgPT4gKHRoaXMubW91bnQgPSByZWYpfT5cclxuICAgICAgICBkc1xyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGEoc3Nzcykge1xyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICByZXR1cm4gKCkgPT4ge307XHJcbiAgfSwgW3Nzc3NdKTtcclxuICByZXR1cm4gPGRpdj5Eb250IHdvcnJ5ITwvZGl2PjtcclxufVxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI4NjM5NWIyODRmMTMxMDAyYzA5YzlhNmQzMmJmZGUxYi5qcGdcIjsiXSwic291cmNlUm9vdCI6IiJ9
//# sourceMappingURL=main.c8e8459f4546c83bdc5b.js.map