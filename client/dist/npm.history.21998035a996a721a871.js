(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{21:function(n,t,e){"use strict";e.d(t,"a",function(){return y}),e.d(t,"b",function(){return L}),e.d(t,"d",function(){return T}),e.d(t,"c",function(){return d}),e.d(t,"f",function(){return l}),e.d(t,"e",function(){return h});var o=e(11),i=e(153),r=e(154),a=e(16);function c(n){return"/"===n.charAt(0)?n:"/"+n}function u(n){return"/"===n.charAt(0)?n.substr(1):n}function f(n,t){return function(n,t){return 0===n.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(n.charAt(t.length))}(n,t)?n.substr(t.length):n}function s(n){return"/"===n.charAt(n.length-1)?n.slice(0,-1):n}function h(n){var t=n.pathname,e=n.search,o=n.hash,i=t||"/";return e&&"?"!==e&&(i+="?"===e.charAt(0)?e:"?"+e),o&&"#"!==o&&(i+="#"===o.charAt(0)?o:"#"+o),i}function d(n,t,e,r){var a;"string"==typeof n?(a=function(n){var t=n||"/",e="",o="",i=t.indexOf("#");-1!==i&&(o=t.substr(i),t=t.substr(0,i));var r=t.indexOf("?");return-1!==r&&(e=t.substr(r),t=t.substr(0,r)),{pathname:t,search:"?"===e?"":e,hash:"#"===o?"":o}}(n)).state=t:(void 0===(a=Object(o.a)({},n)).pathname&&(a.pathname=""),a.search?"?"!==a.search.charAt(0)&&(a.search="?"+a.search):a.search="",a.hash?"#"!==a.hash.charAt(0)&&(a.hash="#"+a.hash):a.hash="",void 0!==t&&void 0===a.state&&(a.state=t));try{a.pathname=decodeURI(a.pathname)}catch(n){throw n instanceof URIError?new URIError('Pathname "'+a.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):n}return e&&(a.key=e),r?a.pathname?"/"!==a.pathname.charAt(0)&&(a.pathname=Object(i.a)(a.pathname,r.pathname)):a.pathname=r.pathname:a.pathname||(a.pathname="/"),a}function l(n,t){return n.pathname===t.pathname&&n.search===t.search&&n.hash===t.hash&&n.key===t.key&&Object(r.a)(n.state,t.state)}function v(){var n=null;var t=[];return{setPrompt:function(t){return n=t,function(){n===t&&(n=null)}},confirmTransitionTo:function(t,e,o,i){if(null!=n){var r="function"==typeof n?n(t,e):n;"string"==typeof r?"function"==typeof o?o(r,i):i(!0):i(!1!==r)}else i(!0)},appendListener:function(n){var e=!0;function o(){e&&n.apply(void 0,arguments)}return t.push(o),function(){e=!1,t=t.filter(function(n){return n!==o})}},notifyListeners:function(){for(var n=arguments.length,e=new Array(n),o=0;o<n;o++)e[o]=arguments[o];t.forEach(function(n){return n.apply(void 0,e)})}}}var w=!("undefined"==typeof window||!window.document||!window.document.createElement);function p(n,t){t(window.confirm(n))}var m="popstate",g="hashchange";function P(){try{return window.history.state||{}}catch(n){return{}}}function y(n){void 0===n&&(n={}),w||Object(a.a)(!1);var t,e=window.history,i=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,r=!(-1===window.navigator.userAgent.indexOf("Trident")),u=n,l=u.forceRefresh,y=void 0!==l&&l,O=u.getUserConfirmation,b=void 0===O?p:O,x=u.keyLength,k=void 0===x?6:x,A=n.basename?s(c(n.basename)):"";function L(n){var t=n||{},e=t.key,o=t.state,i=window.location,r=i.pathname+i.search+i.hash;return A&&(r=f(r,A)),d(r,o,e)}function E(){return Math.random().toString(36).substr(2,k)}var T=v();function S(n){Object(o.a)(G,n),G.length=e.length,T.notifyListeners(G.location,G.action)}function C(n){(function(n){return void 0===n.state&&-1===navigator.userAgent.indexOf("CriOS")})(n)||H(L(n.state))}function U(){H(L(P()))}var R=!1;function H(n){if(R)R=!1,S();else{T.confirmTransitionTo(n,"POP",b,function(t){t?S({action:"POP",location:n}):function(n){var t=G.location,e=I.indexOf(t.key);-1===e&&(e=0);var o=I.indexOf(n.key);-1===o&&(o=0);var i=e-o;i&&(R=!0,F(i))}(n)})}}var j=L(P()),I=[j.key];function M(n){return A+h(n)}function F(n){e.go(n)}var B=0;function J(n){1===(B+=n)&&1===n?(window.addEventListener(m,C),r&&window.addEventListener(g,U)):0===B&&(window.removeEventListener(m,C),r&&window.removeEventListener(g,U))}var q=!1;var G={length:e.length,action:"POP",location:j,createHref:M,push:function(n,t){var o=d(n,t,E(),G.location);T.confirmTransitionTo(o,"PUSH",b,function(n){if(n){var t=M(o),r=o.key,a=o.state;if(i)if(e.pushState({key:r,state:a},null,t),y)window.location.href=t;else{var c=I.indexOf(G.location.key),u=I.slice(0,c+1);u.push(o.key),I=u,S({action:"PUSH",location:o})}else window.location.href=t}})},replace:function(n,t){var o=d(n,t,E(),G.location);T.confirmTransitionTo(o,"REPLACE",b,function(n){if(n){var t=M(o),r=o.key,a=o.state;if(i)if(e.replaceState({key:r,state:a},null,t),y)window.location.replace(t);else{var c=I.indexOf(G.location.key);-1!==c&&(I[c]=o.key),S({action:"REPLACE",location:o})}else window.location.replace(t)}})},go:F,goBack:function(){F(-1)},goForward:function(){F(1)},block:function(n){void 0===n&&(n=!1);var t=T.setPrompt(n);return q||(J(1),q=!0),function(){return q&&(q=!1,J(-1)),t()}},listen:function(n){var t=T.appendListener(n);return J(1),function(){J(-1),t()}}};return G}var O="hashchange",b={hashbang:{encodePath:function(n){return"!"===n.charAt(0)?n:"!/"+u(n)},decodePath:function(n){return"!"===n.charAt(0)?n.substr(1):n}},noslash:{encodePath:u,decodePath:c},slash:{encodePath:c,decodePath:c}};function x(n){var t=n.indexOf("#");return-1===t?n:n.slice(0,t)}function k(){var n=window.location.href,t=n.indexOf("#");return-1===t?"":n.substring(t+1)}function A(n){window.location.replace(x(window.location.href)+"#"+n)}function L(n){void 0===n&&(n={}),w||Object(a.a)(!1);var t=window.history,e=(window.navigator.userAgent.indexOf("Firefox"),n),i=e.getUserConfirmation,r=void 0===i?p:i,u=e.hashType,l=void 0===u?"slash":u,m=n.basename?s(c(n.basename)):"",g=b[l],P=g.encodePath,y=g.decodePath;function L(){var n=y(k());return m&&(n=f(n,m)),d(n)}var E=v();function T(n){Object(o.a)(q,n),q.length=t.length,E.notifyListeners(q.location,q.action)}var S=!1,C=null;function U(){var n,t,e=k(),o=P(e);if(e!==o)A(o);else{var i=L(),a=q.location;if(!S&&(t=i,(n=a).pathname===t.pathname&&n.search===t.search&&n.hash===t.hash))return;if(C===h(i))return;C=null,function(n){if(S)S=!1,T();else{E.confirmTransitionTo(n,"POP",r,function(t){t?T({action:"POP",location:n}):function(n){var t=q.location,e=I.lastIndexOf(h(t));-1===e&&(e=0);var o=I.lastIndexOf(h(n));-1===o&&(o=0);var i=e-o;i&&(S=!0,M(i))}(n)})}}(i)}}var R=k(),H=P(R);R!==H&&A(H);var j=L(),I=[h(j)];function M(n){t.go(n)}var F=0;function B(n){1===(F+=n)&&1===n?window.addEventListener(O,U):0===F&&window.removeEventListener(O,U)}var J=!1;var q={length:t.length,action:"POP",location:j,createHref:function(n){var t=document.querySelector("base"),e="";return t&&t.getAttribute("href")&&(e=x(window.location.href)),e+"#"+P(m+h(n))},push:function(n,t){var e=d(n,void 0,void 0,q.location);E.confirmTransitionTo(e,"PUSH",r,function(n){if(n){var t=h(e),o=P(m+t);if(k()!==o){C=t,function(n){window.location.hash=n}(o);var i=I.lastIndexOf(h(q.location)),r=I.slice(0,i+1);r.push(t),I=r,T({action:"PUSH",location:e})}else T()}})},replace:function(n,t){var e=d(n,void 0,void 0,q.location);E.confirmTransitionTo(e,"REPLACE",r,function(n){if(n){var t=h(e),o=P(m+t);k()!==o&&(C=t,A(o));var i=I.indexOf(h(q.location));-1!==i&&(I[i]=t),T({action:"REPLACE",location:e})}})},go:M,goBack:function(){M(-1)},goForward:function(){M(1)},block:function(n){void 0===n&&(n=!1);var t=E.setPrompt(n);return J||(B(1),J=!0),function(){return J&&(J=!1,B(-1)),t()}},listen:function(n){var t=E.appendListener(n);return B(1),function(){B(-1),t()}}};return q}function E(n,t,e){return Math.min(Math.max(n,t),e)}function T(n){void 0===n&&(n={});var t=n,e=t.getUserConfirmation,i=t.initialEntries,r=void 0===i?["/"]:i,a=t.initialIndex,c=void 0===a?0:a,u=t.keyLength,f=void 0===u?6:u,s=v();function l(n){Object(o.a)(y,n),y.length=y.entries.length,s.notifyListeners(y.location,y.action)}function w(){return Math.random().toString(36).substr(2,f)}var p=E(c,0,r.length-1),m=r.map(function(n){return d(n,void 0,"string"==typeof n?w():n.key||w())}),g=h;function P(n){var t=E(y.index+n,0,y.entries.length-1),o=y.entries[t];s.confirmTransitionTo(o,"POP",e,function(n){n?l({action:"POP",location:o,index:t}):l()})}var y={length:m.length,action:"POP",location:m[p],index:p,entries:m,createHref:g,push:function(n,t){var o=d(n,t,w(),y.location);s.confirmTransitionTo(o,"PUSH",e,function(n){if(n){var t=y.index+1,e=y.entries.slice(0);e.length>t?e.splice(t,e.length-t,o):e.push(o),l({action:"PUSH",location:o,index:t,entries:e})}})},replace:function(n,t){var o=d(n,t,w(),y.location);s.confirmTransitionTo(o,"REPLACE",e,function(n){n&&(y.entries[y.index]=o,l({action:"REPLACE",location:o}))})},go:P,goBack:function(){P(-1)},goForward:function(){P(1)},canGo:function(n){var t=y.index+n;return t>=0&&t<y.entries.length},block:function(n){return void 0===n&&(n=!1),s.setPrompt(n)},listen:function(n){return s.appendListener(n)}};return y}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=npm.history.21998035a996a721a871.js.map